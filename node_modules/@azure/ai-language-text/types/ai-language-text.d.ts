/**
 * [Azure Cognitive Language Services](https://docs.microsoft.com/azure/cognitive-services/language-service/overview)
 * is a suite of natural language processing (NLP) skills built with
 * best-in-class Microsoft machine learning algorithms used to analyze
 * unstructured text for actions such as sentiment analysis, key phrase
 * extraction, and language detection.
 *
 * @packageDocumentation
 */

import { AzureKeyCredential } from '@azure/core-auth';
import { CommonClientOptions } from '@azure/core-client';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-client';
import { OperationState } from '@azure/core-lro';
import { PagedAsyncIterableIterator } from '@azure/core-paging';
import { SimplePollerLike } from '@azure/core-lro';
import { TokenCredential } from '@azure/core-auth';

/** Options for an Abstractive Summarization action. */
export declare interface AbstractiveSummarizationAction {
    /** The max number of sentences to be part of the summary. */
    maxSentenceCount?: number;
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for an abstractive summarization batch action. */
export declare interface AbstractiveSummarizationBatchAction extends AnalyzeBatchActionCommon, AbstractiveSummarizationAction {
    /**
     * The kind of the action.
     */
    kind: "AbstractiveSummarization";
}

/**
 * The result of an abstractive summarization batch action.
 */
export declare type AbstractiveSummarizationBatchResult = ActionMetadata & BatchActionResult<AbstractiveSummarizationResult, "AbstractiveSummarization">;

/**
 * An error result from the abstractive summarization action on a single document.
 */
export declare type AbstractiveSummarizationErrorResult = TextAnalysisErrorResult;

/**
 * The result of the abstractive summarization action on a single document.
 */
export declare type AbstractiveSummarizationResult = AbstractiveSummarizationSuccessResult | AbstractiveSummarizationErrorResult;

/**
 * The result of the abstractive summarization action on a single document,
 * containing a collection of the summaries identified for that document.
 */
export declare interface AbstractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {
    /**
     * A list of summaries of the input document.
     */
    readonly summaries: AbstractiveSummary[];
}

/** An object representing a single summary with context for given document. */
export declare interface AbstractiveSummary {
    /** The text of the summary. */
    text: string;
    /** The context list of the summary. */
    contexts?: SummaryContext[];
}

/** Configuration common to all actions. */
export declare interface ActionCommon {
    /**
     * If set to true, you opt-out of having your text input logged for troubleshooting. By default, Cognitive Language Service logs your input text for 48 hours, solely to allow for troubleshooting issues. Setting this parameter to true, disables in logging and may limit our ability to remediate issues that occur.
     *
     * Default is false.
     */
    disableServiceLogs?: boolean;
}

/** Configuration common to all actions that use custom models. */
export declare interface ActionCustom extends ActionCommon {
    /** The project name for the model to be used by the action. */
    projectName: string;
    /** The deployment name for the model to be used by the action. */
    deploymentName: string;
}

/**
 * Action metadata.
 */
export declare interface ActionMetadata {
    /**
     * The model version used to perform the action.
     */
    readonly modelVersion: string;
}

/** Configuration common to all actions that use prebuilt models. */
export declare interface ActionPrebuilt extends ActionCommon {
    /** The version of the model to be used by the action. */
    modelVersion?: string;
}

/** Represents the Age entity resolution model. */
export declare interface AgeResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "AgeResolution";
    /** The Age Unit of measurement */
    unit: AgeUnit;
}

/**
 * Defines values for AgeUnit. \
 * {@link KnownAgeUnit} can be used interchangeably with AgeUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **Year** \
 * **Month** \
 * **Week** \
 * **Day**
 */
export declare type AgeUnit = string;

/**
 * Type of actions supported by the {@link TextAnalysisClient.analyze} method.
 */
export declare type AnalyzeActionName = keyof typeof AnalyzeActionNames;

/**
 * Type of actions supported by the {@link TextAnalysisClient.analyze} method.
 */
export declare const AnalyzeActionNames: {
    readonly EntityLinking: "EntityLinking";
    readonly EntityRecognition: "EntityRecognition";
    readonly KeyPhraseExtraction: "KeyPhraseExtraction";
    readonly PiiEntityRecognition: "PiiEntityRecognition";
    readonly LanguageDetection: "LanguageDetection";
    readonly SentimentAnalysis: "SentimentAnalysis";
    readonly DynamicClassification: "DynamicClassification";
};

/**
 * The type of parameters for every action in ${@link AnalyzeActionNames}.
 */
export declare type AnalyzeActionParameters<ActionName extends AnalyzeActionName> = {
    EntityLinking: EntityLinkingAction;
    EntityRecognition: EntityRecognitionAction;
    PiiEntityRecognition: PiiEntityRecognitionAction;
    KeyPhraseExtraction: KeyPhraseExtractionAction;
    SentimentAnalysis: SentimentAnalysisAction;
    DynamicClassification: DynamicClassificationAction;
    LanguageDetection: LanguageDetectionAction;
}[ActionName];

/**
 * Batch of actions.
 */
export declare type AnalyzeBatchAction = EntityLinkingBatchAction | EntityRecognitionBatchAction | KeyPhraseExtractionBatchAction | PiiEntityRecognitionBatchAction | HealthcareBatchAction | SentimentAnalysisBatchAction | ExtractiveSummarizationBatchAction | AbstractiveSummarizationBatchAction | CustomEntityRecognitionBatchAction | CustomSingleLabelClassificationBatchAction | CustomMultiLabelClassificationBatchAction;

/**
 * Options common to all batch actions.
 */
export declare interface AnalyzeBatchActionCommon {
    /**
     * The name of the action.
     */
    actionName?: string;
}

/**
 * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.
 */
export declare type AnalyzeBatchActionName = keyof typeof AnalyzeBatchActionNames;

/**
 * Type of actions supported by the {@link TextAnalysisClient.beginAnalyzeBatch} method.
 */
export declare const AnalyzeBatchActionNames: {
    readonly SentimentAnalysis: "SentimentAnalysis";
    readonly EntityRecognition: "EntityRecognition";
    readonly PiiEntityRecognition: "PiiEntityRecognition";
    readonly KeyPhraseExtraction: "KeyPhraseExtraction";
    readonly EntityLinking: "EntityLinking";
    readonly Healthcare: "Healthcare";
    readonly ExtractiveSummarization: "ExtractiveSummarization";
    readonly AbstractiveSummarization: "AbstractiveSummarization";
    readonly CustomEntityRecognition: "CustomEntityRecognition";
    readonly CustomSingleLabelClassification: "CustomSingleLabelClassification";
    readonly CustomMultiLabelClassification: "CustomMultiLabelClassification";
};

/**
 * The metadata for long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.
 */
export declare interface AnalyzeBatchOperationMetadata {
    /**
     * The date and time the operation was created.
     */
    readonly createdOn: Date;
    /**
     * The date and time when the operation results will expire on the server.
     */
    readonly expiresOn?: Date;
    /**
     * The operation id.
     */
    readonly id: string;
    /**
     * The time the operation status was last updated.
     */
    readonly modifiedOn: Date;
    /**
     * Number of successfully completed actions.
     */
    readonly actionSucceededCount: number;
    /**
     * Number of failed actions.
     */
    readonly actionFailedCount: number;
    /**
     * Number of actions still in progress.
     */
    readonly actionInProgressCount: number;
    /**
     * The operation's display name.
     */
    readonly displayName?: string;
}

/**
 * The state of the begin analyze polling operation.
 */
export declare interface AnalyzeBatchOperationState extends OperationState<PagedAnalyzeBatchResult>, AnalyzeBatchOperationMetadata {
}

/**
 * A poller that polls long-running operations started by {@link TextAnalysisClient.beginAnalyzeBatch}.
 */
export declare type AnalyzeBatchPoller = PollerLike<AnalyzeBatchOperationState, PagedAnalyzeBatchResult>;

/**
 * Results of a batch of actions.
 */
export declare type AnalyzeBatchResult = EntityLinkingBatchResult | EntityRecognitionBatchResult | KeyPhraseExtractionBatchResult | PiiEntityRecognitionBatchResult | SentimentAnalysisBatchResult | HealthcareBatchResult | ExtractiveSummarizationBatchResult | AbstractiveSummarizationBatchResult | CustomEntityRecognitionBatchResult | CustomSingleLabelClassificationBatchResult | CustomMultiLabelClassificationBatchResult;

/**
 * The type of results of every action in ${@link AnalyzeActionNames}.
 */
export declare type AnalyzeResult<ActionName extends AnalyzeActionName> = {
    EntityLinking: EntityLinkingResult[];
    EntityRecognition: EntityRecognitionResult[];
    PiiEntityRecognition: PiiEntityRecognitionResult[];
    KeyPhraseExtraction: KeyPhraseExtractionResult[];
    SentimentAnalysis: SentimentAnalysisResult[];
    DynamicClassification: DynamicClassificationResult[];
    LanguageDetection: LanguageDetectionResult[];
}[ActionName];

/** Represents the area entity resolution model. */
export declare interface AreaResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "AreaResolution";
    /** The area Unit of measurement */
    unit: AreaUnit;
}

/**
 * Defines values for AreaUnit. \
 * {@link KnownAreaUnit} can be used interchangeably with AreaUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **SquareKilometer** \
 * **SquareHectometer** \
 * **SquareDecameter** \
 * **SquareDecimeter** \
 * **SquareMeter** \
 * **SquareCentimeter** \
 * **SquareMillimeter** \
 * **SquareInch** \
 * **SquareFoot** \
 * **SquareMile** \
 * **SquareYard** \
 * **Acre**
 */
export declare type AreaUnit = string;

/** An object that contains the predicted sentiment, confidence scores and other information about an assessment of a target. For example, in the sentence "The food is good", the assessment of the target 'food' is 'good'. */
export declare interface AssessmentSentiment {
    /** Assessment sentiment in the sentence. */
    sentiment: TokenSentimentLabel;
    /** Assessment sentiment confidence scores in the sentence. */
    confidenceScores: TargetConfidenceScores;
    /** The assessment offset from the start of the sentence. */
    offset: number;
    /** The length of the assessment. */
    length: number;
    /** The assessment text detected. */
    text: string;
    /** The indicator representing if the assessment is negated. */
    isNegated: boolean;
}

export { AzureKeyCredential }

/** The abstract base class for entity resolutions. */
export declare interface BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "AgeResolution" | "VolumeResolution" | "SpeedResolution" | "AreaResolution" | "LengthResolution" | "InformationResolution" | "TemperatureResolution" | "WeightResolution" | "CurrencyResolution" | "BooleanResolution" | "DateTimeResolution" | "NumberResolution" | "OrdinalResolution" | "TemporalSpanResolution" | "NumericRangeResolution";
}

export declare type BaseResolutionUnion = BaseResolution | AgeResolution | VolumeResolution | SpeedResolution | AreaResolution | LengthResolution | InformationResolution | TemperatureResolution | WeightResolution | CurrencyResolution | BooleanResolution | DateTimeResolution | NumberResolution | OrdinalResolution | TemporalSpanResolution | NumericRangeResolution;

/**
 * The error of an analyze batch action.
 */
export declare interface BatchActionErrorResult<Kind extends AnalyzeBatchActionName> extends BatchActionState<Kind> {
    /**
     * When this action was completed by the service.
     */
    readonly failedOn: Date;
    /**
     * The Error for this action result.
     */
    readonly error: TextAnalysisError;
}

/**
 * The result of a batched action.
 */
export declare type BatchActionResult<T, Kind extends AnalyzeBatchActionName> = BatchActionSuccessResult<T, Kind> | BatchActionErrorResult<Kind>;

/** The State of a batched action */
export declare interface BatchActionState<Kind extends AnalyzeBatchActionName> {
    /**
     * The kind of the action results.
     */
    readonly kind: Kind;
    /**
     * The name of the action.
     */
    readonly actionName?: string;
    /**
     * Action statistics.
     */
    readonly statistics?: TextDocumentBatchStatistics;
}

/**
 * The state of a succeeded batched action.
 */
export declare interface BatchActionSuccessResult<T, Kind extends AnalyzeBatchActionName> extends BatchActionState<Kind> {
    /**
     * The list of document results.
     */
    readonly results: WithDetectedLanguage<T>[];
    /**
     * When this action was completed by the service.
     */
    readonly completedOn: Date;
    /**
     * Discriminant to determine if that this is an error result.
     */
    readonly error?: undefined;
}

/**
 * Options for the begin analyze actions operation.
 */
export declare interface BeginAnalyzeBatchOptions extends TextAnalysisOperationOptions {
    /**
     * Time delay between poll requests, in milliseconds.
     */
    updateIntervalInMs?: number;
    /**
     * The operation's display name.
     */
    displayName?: string;
    /**
     * Default language code to use for records requesting automatic language detection
     */
    defaultLanguage?: string;
}

/** A resolution for boolean expressions */
export declare interface BooleanResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "BooleanResolution";
    value: boolean;
}

/** A classification result from a custom classify document single category action */
export declare interface ClassificationCategory {
    /** Classification type. */
    category: string;
    /** Confidence score between 0 and 1 of the recognized class. */
    confidenceScore: number;
}

/**
 * Defines values for ClassificationType. \
 * {@link KnownClassificationType} can be used interchangeably with ClassificationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Single** \
 * **Multi**
 */
export declare type ClassificationType = string;

/** Represents the currency entity resolution model. */
export declare interface CurrencyResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "CurrencyResolution";
    /** The alphabetic code based on another ISO standard, ISO 3166, which lists the codes for country names. The first two letters of the ISO 4217 three-letter code are the same as the code for the country name, and, where possible, the third letter corresponds to the first letter of the currency name. */
    iso4217?: string;
    /** The unit of the amount captured in the extracted entity */
    unit: string;
}

/**
 * Custom action metadata.
 */
export declare interface CustomActionMetadata {
    /**
     * The name of the project used to perform the action.
     */
    readonly projectName: string;
    /**
     * The name of the deployment used to perform the action.
     */
    readonly deploymentName: string;
}

/** Supported parameters for a Custom Entities task. */
export declare interface CustomEntityRecognitionAction extends ActionCustom {
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for a custom entity recognition batch action. */
export declare interface CustomEntityRecognitionBatchAction extends AnalyzeBatchActionCommon, CustomEntityRecognitionAction {
    /**
     * The kind of the action.
     */
    kind: "CustomEntityRecognition";
}

/**
 * The result of a custom entity recognition batch action.
 */
export declare type CustomEntityRecognitionBatchResult = CustomActionMetadata & BatchActionResult<CustomEntityRecognitionResult, "CustomEntityRecognition">;

/**
 * An error result from the custom entity recognition action on a single document.
 */
export declare type CustomEntityRecognitionErrorResult = TextAnalysisErrorResult;

/**
 * The result of the custom entity recognition action on a single document.
 */
export declare type CustomEntityRecognitionResult = CustomEntityRecognitionSuccessResult | CustomEntityRecognitionErrorResult;

/**
 * The result of the custom entity recognition action on a single document,
 * containing a collection of the entities identified in that document.
 */
export declare interface CustomEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: Entity[];
}

/** Options for a multi-label classification custom action */
export declare interface CustomMultiLabelClassificationAction extends ActionCustom {
}

/** Options for a custom multi-label classification batch action. */
export declare interface CustomMultiLabelClassificationBatchAction extends AnalyzeBatchActionCommon, CustomMultiLabelClassificationAction {
    /**
     * The kind of the action.
     */
    kind: "CustomMultiLabelClassification";
}

/**
 * The result of a custom multi-label classification batch action.
 */
export declare type CustomMultiLabelClassificationBatchResult = CustomActionMetadata & BatchActionResult<CustomMultiLabelClassificationResult, "CustomMultiLabelClassification">;

/**
 * An error result from the multi-label classification action on a multi document.
 */
export declare type CustomMultiLabelClassificationErrorResult = TextAnalysisErrorResult;

/**
 * The result of the multi-label classification action on a multi document.
 */
export declare type CustomMultiLabelClassificationResult = CustomMultiLabelClassificationSuccessResult | CustomMultiLabelClassificationErrorResult;

/**
 * The result of a successful multi-label classification action on a multi document,
 * containing the result of the classification.
 */
export declare interface CustomMultiLabelClassificationSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of classifications in the input document.
     */
    readonly classifications: ClassificationCategory[];
}

/** Options for a single-label classification custom action */
export declare interface CustomSingleLabelClassificationAction extends ActionCustom {
}

/** Options for a custom single-label classification batch action. */
export declare interface CustomSingleLabelClassificationBatchAction extends AnalyzeBatchActionCommon, CustomSingleLabelClassificationAction {
    /**
     * The kind of the action.
     */
    kind: "CustomSingleLabelClassification";
}

/**
 * The result of a custom single-label classification batch action.
 */
export declare type CustomSingleLabelClassificationBatchResult = CustomActionMetadata & BatchActionResult<CustomSingleLabelClassificationResult, "CustomSingleLabelClassification">;

/**
 * An error result from the single-label classification action on a single document.
 */
export declare type CustomSingleLabelClassificationErrorResult = TextAnalysisErrorResult;

/**
 * The result of the single-label classification action on a single document.
 */
export declare type CustomSingleLabelClassificationResult = CustomSingleLabelClassificationSuccessResult | CustomSingleLabelClassificationErrorResult;

/**
 * The result of a successful single-label classification action on a single document,
 * containing the result of the classification.
 */
export declare interface CustomSingleLabelClassificationSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of classifications in the input document.
     */
    readonly classifications: ClassificationCategory[];
}

/** A resolution for datetime entity instances. */
export declare interface DateTimeResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "DateTimeResolution";
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    timex: string;
    /** The DateTime SubKind */
    dateTimeSubKind: DateTimeSubKind;
    /** The actual time that the extracted text denote. */
    value: string;
    /** An optional modifier of a date/time instance. */
    modifier?: TemporalModifier;
}

/**
 * Defines values for DateTimeSubKind. \
 * {@link KnownDateTimeSubKind} can be used interchangeably with DateTimeSubKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Time** \
 * **Date** \
 * **DateTime** \
 * **Duration** \
 * **Set**
 */
export declare type DateTimeSubKind = string;

/** Information about the language of a document as identified by the Language service. */
export declare interface DetectedLanguage {
    /** Long name of a detected language (e.g. English, French). */
    name: string;
    /** A two letter representation of the detected language according to the ISO 639-1 standard (e.g. en, fr). */
    iso6391Name: string;
    /** A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. */
    confidenceScore: number;
    /** Identifies the script of the input document. */
    script?: ScriptKind;
}

/** The auto-detected language of the input document. */
export declare interface DocumentDetectedLanguage {
    /** If 'language' is set to 'auto' for the document in the request this field will contain a 2 letter ISO 639-1 representation of the language detected for this document. */
    detectedLanguage?: DetectedLanguage;
}

/** Defines values for DocumentSentimentLabel. */
export declare type DocumentSentimentLabel = "positive" | "neutral" | "negative" | "mixed";

/** Represents a warning encountered while processing a document. */
export declare interface DocumentWarning {
    /** Error code. */
    code: WarningCode;
    /** Warning message. */
    message: string;
}

/** Options for a dynamic classification action. */
export declare interface DynamicClassificationAction extends ActionPrebuilt {
    /** Specifies either one or multiple categories per document. Defaults to multi classification which may return more than one class for each document. */
    classificationType?: ClassificationType;
    /** a list of categories to which input is classified to. */
    categories: string[];
}

/**
 * An error result from a language detection action on a single document.
 */
export declare type DynamicClassificationErrorResult = TextAnalysisErrorResult;

/**
 * The result of a language detection action on a single document.
 */
export declare type DynamicClassificationResult = DynamicClassificationSuccessResult | DynamicClassificationErrorResult;

/**
 * The result of a language detection action on a single document,
 * containing a prediction of what language the document is written in.
 */
export declare interface DynamicClassificationSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of classifications in the input document.
     */
    readonly classifications: ClassificationCategory[];
}

/** A word or phrase identified as an entity that is categorized within a taxonomy of types. The set of categories recognized by the Language service is described at https://docs.microsoft.com/azure/cognitive-services/language-service/named-entity-recognition/concepts/named-entity-categories . */
export declare interface Entity {
    /** Entity text as appears in the request. */
    text: string;
    /** Entity type. */
    category: string;
    /** (Optional) Entity sub type. */
    subCategory?: string;
    /** Start position for the entity text. Use of different 'stringIndexType' values can affect the offset returned. */
    offset: number;
    /** Length for the entity text. Use of different 'stringIndexType' values can affect the length returned. */
    length: number;
    /** Confidence score between 0 and 1 of the extracted entity. */
    confidenceScore: number;
}

/** Defines values for EntityAssociation. */
export declare type EntityAssociation = "subject" | "other";

/** Defines values for EntityCertainty. */
export declare type EntityCertainty = "positive" | "positivePossible" | "neutralPossible" | "negativePossible" | "negative";

/** Defines values for EntityConditionality. */
export declare type EntityConditionality = "hypothetical" | "conditional";

/** A type representing a reference for the healthcare entity into a specific entity catalog. */
export declare interface EntityDataSource {
    /** Entity Catalog. Examples include: UMLS, CHV, MSH, etc. */
    name: string;
    /** Entity id in the given source catalog. */
    entityId: string;
}

/** Options for an entity linking action. */
export declare interface EntityLinkingAction extends ActionPrebuilt {
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for an entity linking batch action. */
export declare interface EntityLinkingBatchAction extends AnalyzeBatchActionCommon, EntityLinkingAction {
    /**
     * The kind of the action.
     */
    kind: "EntityLinking";
}

/**
 * The result of an entity linking batch action.
 */
export declare type EntityLinkingBatchResult = ActionMetadata & BatchActionResult<EntityLinkingResult, "EntityLinking">;

/**
 * An error result from an entity linking action on a single document.
 */
export declare type EntityLinkingErrorResult = TextAnalysisErrorResult;

/**
 * The result of an entity linking action on a single document.
 */
export declare type EntityLinkingResult = EntityLinkingSuccessResult | EntityLinkingErrorResult;

/**
 * The result of a entity linking action on a single document, containing a
 * collection of the {@link LinkedEntity} objects identified in that document.
 */
export declare interface EntityLinkingSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: LinkedEntity[];
}

/** Options for an entity recognition action. */
export declare interface EntityRecognitionAction extends ActionPrebuilt {
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for an entity recognition batch action. */
export declare interface EntityRecognitionBatchAction extends AnalyzeBatchActionCommon, EntityRecognitionAction {
    /**
     * The kind of the action.
     */
    kind: "EntityRecognition";
}

/**
 * The result of an entity recognition batch action.
 */
export declare type EntityRecognitionBatchResult = ActionMetadata & BatchActionResult<EntityRecognitionResult, "EntityRecognition">;

/**
 * An error result from an entity recognition action on a single document.
 */
export declare type EntityRecognitionErrorResult = TextAnalysisErrorResult;

/**
 * The result of an entity recognition action on a single document.
 */
export declare type EntityRecognitionResult = EntityRecognitionSuccessResult | EntityRecognitionErrorResult;

/**
 * The result of an entity recognition action on a single document, containing
 * a collection of {@link Entity} objects identified in that document.
 */
export declare interface EntityRecognitionSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: EntityWithResolution[];
}

/** An entity with resolution. */
export declare interface EntityWithResolution extends Entity {
    /** The collection of entity resolution objects. */
    resolutions?: BaseResolutionUnion[];
}

/** Supported parameters for an Extractive Summarization task. */
export declare interface ExtractiveSummarizationAction extends ActionPrebuilt {
    /** The max number of sentences to be part of the summary. */
    maxSentenceCount?: number;
    /** The sorting criteria to use for the results of Extractive Summarization. */
    orderBy?: ExtractiveSummarizationOrderingCriteria;
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for an extractive summarization batch action. */
export declare interface ExtractiveSummarizationBatchAction extends AnalyzeBatchActionCommon, ExtractiveSummarizationAction {
    /**
     * The kind of the action.
     */
    kind: "ExtractiveSummarization";
}

/**
 * The result of an extractive summarization batch action.
 */
export declare type ExtractiveSummarizationBatchResult = ActionMetadata & BatchActionResult<ExtractiveSummarizationResult, "ExtractiveSummarization">;

/**
 * An error result from the extractive summarization action on a single document.
 */
export declare type ExtractiveSummarizationErrorResult = TextAnalysisErrorResult;

/**
 * Defines values for ExtractiveSummarizationOrderingCriteria. \
 * {@link KnownExtractiveSummarizationOrderingCriteria} can be used interchangeably with ExtractiveSummarizationOrderingCriteria,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Offset**: Indicates that results should be sorted in order of appearance in the text. \
 * **Rank**: Indicates that results should be sorted in order of importance (i.e. rank score) according to the model.
 */
export declare type ExtractiveSummarizationOrderingCriteria = string;

/**
 * The result of the extractive summarization action on a single document.
 */
export declare type ExtractiveSummarizationResult = ExtractiveSummarizationSuccessResult | ExtractiveSummarizationErrorResult;

/**
 * The result of the extractive summarization action on a single document,
 * containing a collection of the summary identified in that document.
 */
export declare interface ExtractiveSummarizationSuccessResult extends TextAnalysisSuccessResult {
    /**
     * A list of sentences composing a summary of the input document.
     */
    readonly sentences: SummarySentence[];
}

/**
 * Defines values for FhirVersion. \
 * {@link KnownFhirVersion} can be used interchangeably with FhirVersion,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **4.0.1**
 */
export declare type FhirVersion = string;

/** Supported parameters for a Healthcare task. */
export declare interface HealthcareAction extends ActionPrebuilt {
    /** The FHIR Spec version that the result will use to format the fhirBundle. For additional information see https://www.hl7.org/fhir/overview.html. */
    fhirVersion?: FhirVersion;
    /** Document type that can be provided as input for Fhir Documents. Expect to have fhirVersion provided when used. Behavior of using None enum is the same as not using the documentType parameter. */
    documentType?: HealthcareDocumentType;
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** An object that describes metadata about the healthcare entity such as whether it is hypothetical or conditional. */
export declare interface HealthcareAssertion {
    /** Describes any conditionality on the entity. */
    conditionality?: EntityConditionality;
    /** Describes the entities certainty and polarity. */
    certainty?: EntityCertainty;
    /** Describes if the entity is the subject of the text or if it describes someone else. */
    association?: EntityAssociation;
}

/** Options for a healthcare batch action. */
export declare interface HealthcareBatchAction extends AnalyzeBatchActionCommon, HealthcareAction {
    /**
     * The kind of the action.
     */
    kind: "Healthcare";
}

/**
 * The result of a healthcare batch action.
 */
export declare type HealthcareBatchResult = ActionMetadata & BatchActionResult<HealthcareResult, "Healthcare">;

/**
 * Defines values for HealthcareDocumentType. \
 * {@link KnownHealthcareDocumentType} can be used interchangeably with HealthcareDocumentType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **ClinicalTrial** \
 * **DischargeSummary** \
 * **ProgressNote** \
 * **HistoryAndPhysical** \
 * **Consult** \
 * **Imaging** \
 * **Pathology** \
 * **ProcedureNote**
 */
export declare type HealthcareDocumentType = string;

/**
 * A healthcare entity represented as a node in a directed graph where the edges are
 * a particular type of relationship between the source and target nodes.
 */
export declare interface HealthcareEntity extends Entity {
    /**
     * Normalized name for the entity. For example, the normalized text for "histologically" is "histologic".
     */
    readonly normalizedText?: string;
    /**
     * Whether the entity is negated.
     */
    readonly assertion?: HealthcareAssertion;
    /**
     * Entity references in known data sources.
     */
    readonly dataSources: EntityDataSource[];
    /**
     * Defines values for HealthcareEntityCategory.
     * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,
     *  this enum contains the known values that the service supports.
     * ### Known values supported by the service
     * **BODY_STRUCTURE**
     * **AGE**
     * **GENDER**
     * **EXAMINATION_NAME**
     * **DATE**
     * **DIRECTION**
     * **FREQUENCY**
     * **MEASUREMENT_VALUE**
     * **MEASUREMENT_UNIT**
     * **RELATIONAL_OPERATOR**
     * **TIME**
     * **GENE_OR_PROTEIN**
     * **VARIANT**
     * **ADMINISTRATIVE_EVENT**
     * **CARE_ENVIRONMENT**
     * **HEALTHCARE_PROFESSION**
     * **DIAGNOSIS**
     * **SYMPTOM_OR_SIGN**
     * **CONDITION_QUALIFIER**
     * **MEDICATION_CLASS**
     * **MEDICATION_NAME**
     * **DOSAGE**
     * **MEDICATION_FORM**
     * **MEDICATION_ROUTE**
     * **FAMILY_RELATION**
     * **TREATMENT_NAME**
     */
    readonly category: HealthcareEntityCategory;
}

/**
 * Defines values for HealthcareEntityCategory. \
 * {@link KnownHealthcareEntityCategory} can be used interchangeably with HealthcareEntityCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BodyStructure** \
 * **Age** \
 * **Gender** \
 * **ExaminationName** \
 * **Date** \
 * **Direction** \
 * **Frequency** \
 * **MeasurementValue** \
 * **MeasurementUnit** \
 * **RelationalOperator** \
 * **Time** \
 * **GeneOrProtein** \
 * **Variant** \
 * **AdministrativeEvent** \
 * **CareEnvironment** \
 * **HealthcareProfession** \
 * **Diagnosis** \
 * **SymptomOrSign** \
 * **ConditionQualifier** \
 * **MedicationClass** \
 * **MedicationName** \
 * **Dosage** \
 * **MedicationForm** \
 * **MedicationRoute** \
 * **FamilyRelation** \
 * **TreatmentName**
 */
export declare type HealthcareEntityCategory = string;

/**
 * A relationship between two or more healthcare entities.
 */
export declare interface HealthcareEntityRelation {
    /**
     * The type of the healthcare relation.
     */
    readonly relationType: RelationType;
    /**
     * The list of healthcare entities and their roles in the healthcare relation.
     */
    readonly roles: HealthcareEntityRelationRole[];
    /**
     * The confidence score between 0 and 1 of the extracted relation.
     */
    readonly confidenceScore?: number;
}

/**
 * A healthcare entity that plays a specific role in a relation.
 */
export declare interface HealthcareEntityRelationRole {
    /**
     * A healthcare entity
     */
    readonly entity: HealthcareEntity;
    /**
     * The role of the healthcare entity in a particular relation.
     */
    readonly name: HealthcareEntityRelationRoleType;
}

/**
 * The type of different roles a healthcare entity can play in a relation.
 */
export declare type HealthcareEntityRelationRoleType = string;

/**
 * An error result from the healthcare analysis action on a single document.
 */
export declare type HealthcareErrorResult = TextAnalysisErrorResult;

/**
 * The result of the healthcare analysis action on a single document.
 */
export declare type HealthcareResult = HealthcareSuccessResult | HealthcareErrorResult;

/**
 * The results of a successful healthcare analysis action for a single document.
 */
export declare interface HealthcareSuccessResult extends TextAnalysisSuccessResult {
    /**
     * Healthcare entities.
     */
    readonly entities: HealthcareEntity[];
    /**
     * Relations between healthcare entities.
     */
    readonly entityRelations: HealthcareEntityRelation[];
    /**
     * JSON bundle containing a FHIR compatible object for consumption in other
     * Healthcare tools. For additional information see {@link https://www.hl7.org/fhir/overview.html}.
     */
    readonly fhirBundle?: Record<string, any>;
}

/** Represents the information (data) entity resolution model. */
export declare interface InformationResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "InformationResolution";
    /** The information (data) Unit of measurement. */
    unit: InformationUnit;
}

/**
 * Defines values for InformationUnit. \
 * {@link KnownInformationUnit} can be used interchangeably with InformationUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **Bit** \
 * **Kilobit** \
 * **Megabit** \
 * **Gigabit** \
 * **Terabit** \
 * **Petabit** \
 * **Byte** \
 * **Kilobyte** \
 * **Megabyte** \
 * **Gigabyte** \
 * **Terabyte** \
 * **Petabyte**
 */
export declare type InformationUnit = string;

/** Options for a key phrase recognition action. */
export declare interface KeyPhraseExtractionAction extends ActionPrebuilt {
}

/** Options for an key phrase extraction batch action. */
export declare interface KeyPhraseExtractionBatchAction extends AnalyzeBatchActionCommon, KeyPhraseExtractionAction {
    /**
     * The kind of the action.
     */
    kind: "KeyPhraseExtraction";
}

/**
 * The result of a key phrase extraction batch action.
 */
export declare type KeyPhraseExtractionBatchResult = ActionMetadata & BatchActionResult<KeyPhraseExtractionResult, "KeyPhraseExtraction">;

/**
 * An error result from a key phrase extraction action on a single document.
 */
export declare type KeyPhraseExtractionErrorResult = TextAnalysisErrorResult;

/**
 * The result of a sentiment analysis action on a single document.
 */
export declare type KeyPhraseExtractionResult = KeyPhraseExtractionSuccessResult | KeyPhraseExtractionErrorResult;

/**
 * The result of a key phrase extraction action on a single document,
 * containing a collection of the key phrases identified in that document.
 */
export declare interface KeyPhraseExtractionSuccessResult extends TextAnalysisSuccessResult {
    /**
     * A list of representative words or phrases. The number of key phrases
     * returned is proportional to the number of words in the input document.
     */
    readonly keyPhrases: string[];
}

/** Known values of {@link AgeUnit} that the service accepts. */
export declare enum KnownAgeUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Year */
    Year = "Year",
    /** Month */
    Month = "Month",
    /** Week */
    Week = "Week",
    /** Day */
    Day = "Day"
}

/** Known values of {@link AreaUnit} that the service accepts. */
export declare enum KnownAreaUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** SquareKilometer */
    SquareKilometer = "SquareKilometer",
    /** SquareHectometer */
    SquareHectometer = "SquareHectometer",
    /** SquareDecameter */
    SquareDecameter = "SquareDecameter",
    /** SquareDecimeter */
    SquareDecimeter = "SquareDecimeter",
    /** SquareMeter */
    SquareMeter = "SquareMeter",
    /** SquareCentimeter */
    SquareCentimeter = "SquareCentimeter",
    /** SquareMillimeter */
    SquareMillimeter = "SquareMillimeter",
    /** SquareInch */
    SquareInch = "SquareInch",
    /** SquareFoot */
    SquareFoot = "SquareFoot",
    /** SquareMile */
    SquareMile = "SquareMile",
    /** SquareYard */
    SquareYard = "SquareYard",
    /** Acre */
    Acre = "Acre"
}

/** Known values of {@link ClassificationType} that the service accepts. */
export declare enum KnownClassificationType {
    /** Single */
    Single = "Single",
    /** Multi */
    Multi = "Multi"
}

/** Known values of {@link DateTimeSubKind} that the service accepts. */
export declare enum KnownDateTimeSubKind {
    /** Time */
    Time = "Time",
    /** Date */
    Date = "Date",
    /** DateTime */
    DateTime = "DateTime",
    /** Duration */
    Duration = "Duration",
    /** Set */
    Set = "Set"
}

/** Known values of {@link ErrorCode} that the service accepts. */
export declare enum KnownErrorCode {
    /** InvalidRequest */
    InvalidRequest = "InvalidRequest",
    /** InvalidArgument */
    InvalidArgument = "InvalidArgument",
    /** Unauthorized */
    Unauthorized = "Unauthorized",
    /** Forbidden */
    Forbidden = "Forbidden",
    /** NotFound */
    NotFound = "NotFound",
    /** ProjectNotFound */
    ProjectNotFound = "ProjectNotFound",
    /** OperationNotFound */
    OperationNotFound = "OperationNotFound",
    /** AzureCognitiveSearchNotFound */
    AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
    /** AzureCognitiveSearchIndexNotFound */
    AzureCognitiveSearchIndexNotFound = "AzureCognitiveSearchIndexNotFound",
    /** TooManyRequests */
    TooManyRequests = "TooManyRequests",
    /** AzureCognitiveSearchThrottling */
    AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
    /** AzureCognitiveSearchIndexLimitReached */
    AzureCognitiveSearchIndexLimitReached = "AzureCognitiveSearchIndexLimitReached",
    /** InternalServerError */
    InternalServerError = "InternalServerError",
    /** ServiceUnavailable */
    ServiceUnavailable = "ServiceUnavailable",
    /** Timeout */
    Timeout = "Timeout",
    /** QuotaExceeded */
    QuotaExceeded = "QuotaExceeded",
    /** Conflict */
    Conflict = "Conflict",
    /** Warning */
    Warning = "Warning"
}

/** Known values of {@link ExtractiveSummarizationOrderingCriteria} that the service accepts. */
export declare enum KnownExtractiveSummarizationOrderingCriteria {
    /** Indicates that results should be sorted in order of appearance in the text. */
    Offset = "Offset",
    /** Indicates that results should be sorted in order of importance (i.e. rank score) according to the model. */
    Rank = "Rank"
}

/**
 * Known values of the {@link HealthcareAction.fhirVersion} parameter.
 */
export declare enum KnownFhirVersion {
    /** 4.0.1 */
    "4.0.1" = "4.0.1"
}

/** Known values of {@link HealthcareDocumentType} that the service accepts. */
export declare enum KnownHealthcareDocumentType {
    /** None */
    None = "None",
    /** ClinicalTrial */
    ClinicalTrial = "ClinicalTrial",
    /** DischargeSummary */
    DischargeSummary = "DischargeSummary",
    /** ProgressNote */
    ProgressNote = "ProgressNote",
    /** HistoryAndPhysical */
    HistoryAndPhysical = "HistoryAndPhysical",
    /** Consult */
    Consult = "Consult",
    /** Imaging */
    Imaging = "Imaging",
    /** Pathology */
    Pathology = "Pathology",
    /** ProcedureNote */
    ProcedureNote = "ProcedureNote"
}

/** Known values of {@link HealthcareEntityCategory} that the service accepts. */
export declare enum KnownHealthcareEntityCategory {
    /** BodyStructure */
    BodyStructure = "BodyStructure",
    /** Age */
    Age = "Age",
    /** Gender */
    Gender = "Gender",
    /** ExaminationName */
    ExaminationName = "ExaminationName",
    /** Date */
    Date = "Date",
    /** Direction */
    Direction = "Direction",
    /** Frequency */
    Frequency = "Frequency",
    /** MeasurementValue */
    MeasurementValue = "MeasurementValue",
    /** MeasurementUnit */
    MeasurementUnit = "MeasurementUnit",
    /** RelationalOperator */
    RelationalOperator = "RelationalOperator",
    /** Time */
    Time = "Time",
    /** GeneOrProtein */
    GeneOrProtein = "GeneOrProtein",
    /** Variant */
    Variant = "Variant",
    /** AdministrativeEvent */
    AdministrativeEvent = "AdministrativeEvent",
    /** CareEnvironment */
    CareEnvironment = "CareEnvironment",
    /** HealthcareProfession */
    HealthcareProfession = "HealthcareProfession",
    /** Diagnosis */
    Diagnosis = "Diagnosis",
    /** SymptomOrSign */
    SymptomOrSign = "SymptomOrSign",
    /** ConditionQualifier */
    ConditionQualifier = "ConditionQualifier",
    /** MedicationClass */
    MedicationClass = "MedicationClass",
    /** MedicationName */
    MedicationName = "MedicationName",
    /** Dosage */
    Dosage = "Dosage",
    /** MedicationForm */
    MedicationForm = "MedicationForm",
    /** MedicationRoute */
    MedicationRoute = "MedicationRoute",
    /** FamilyRelation */
    FamilyRelation = "FamilyRelation",
    /** TreatmentName */
    TreatmentName = "TreatmentName"
}

/** Known values of {@link InformationUnit} that the service accepts. */
export declare enum KnownInformationUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Bit */
    Bit = "Bit",
    /** Kilobit */
    Kilobit = "Kilobit",
    /** Megabit */
    Megabit = "Megabit",
    /** Gigabit */
    Gigabit = "Gigabit",
    /** Terabit */
    Terabit = "Terabit",
    /** Petabit */
    Petabit = "Petabit",
    /** Byte */
    Byte = "Byte",
    /** Kilobyte */
    Kilobyte = "Kilobyte",
    /** Megabyte */
    Megabyte = "Megabyte",
    /** Gigabyte */
    Gigabyte = "Gigabyte",
    /** Terabyte */
    Terabyte = "Terabyte",
    /** Petabyte */
    Petabyte = "Petabyte"
}

/** Known values of {@link InnerErrorCode} that the service accepts. */
export declare enum KnownInnerErrorCode {
    /** InvalidRequest */
    InvalidRequest = "InvalidRequest",
    /** InvalidParameterValue */
    InvalidParameterValue = "InvalidParameterValue",
    /** KnowledgeBaseNotFound */
    KnowledgeBaseNotFound = "KnowledgeBaseNotFound",
    /** AzureCognitiveSearchNotFound */
    AzureCognitiveSearchNotFound = "AzureCognitiveSearchNotFound",
    /** AzureCognitiveSearchThrottling */
    AzureCognitiveSearchThrottling = "AzureCognitiveSearchThrottling",
    /** ExtractionFailure */
    ExtractionFailure = "ExtractionFailure",
    /** InvalidRequestBodyFormat */
    InvalidRequestBodyFormat = "InvalidRequestBodyFormat",
    /** EmptyRequest */
    EmptyRequest = "EmptyRequest",
    /** MissingInputDocuments */
    MissingInputDocuments = "MissingInputDocuments",
    /** InvalidDocument */
    InvalidDocument = "InvalidDocument",
    /** ModelVersionIncorrect */
    ModelVersionIncorrect = "ModelVersionIncorrect",
    /** InvalidDocumentBatch */
    InvalidDocumentBatch = "InvalidDocumentBatch",
    /** UnsupportedLanguageCode */
    UnsupportedLanguageCode = "UnsupportedLanguageCode",
    /** InvalidCountryHint */
    InvalidCountryHint = "InvalidCountryHint"
}

/** Known values of {@link LengthUnit} that the service accepts. */
export declare enum KnownLengthUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Kilometer */
    Kilometer = "Kilometer",
    /** Hectometer */
    Hectometer = "Hectometer",
    /** Decameter */
    Decameter = "Decameter",
    /** Meter */
    Meter = "Meter",
    /** Decimeter */
    Decimeter = "Decimeter",
    /** Centimeter */
    Centimeter = "Centimeter",
    /** Millimeter */
    Millimeter = "Millimeter",
    /** Micrometer */
    Micrometer = "Micrometer",
    /** Nanometer */
    Nanometer = "Nanometer",
    /** Picometer */
    Picometer = "Picometer",
    /** Mile */
    Mile = "Mile",
    /** Yard */
    Yard = "Yard",
    /** Inch */
    Inch = "Inch",
    /** Foot */
    Foot = "Foot",
    /** LightYear */
    LightYear = "LightYear",
    /** Pt */
    Pt = "Pt"
}

/** Known values of {@link NumberKind} that the service accepts. */
export declare enum KnownNumberKind {
    /** Integer */
    Integer = "Integer",
    /** Decimal */
    Decimal = "Decimal",
    /** Power */
    Power = "Power",
    /** Fraction */
    Fraction = "Fraction",
    /** Percent */
    Percent = "Percent",
    /** Unspecified */
    Unspecified = "Unspecified"
}

/** Known values of {@link PiiEntityCategory} that the service accepts. */
export declare enum KnownPiiEntityCategory {
    /** ABARoutingNumber */
    ABARoutingNumber = "ABARoutingNumber",
    /** ARNationalIdentityNumber */
    ARNationalIdentityNumber = "ARNationalIdentityNumber",
    /** AUBankAccountNumber */
    AUBankAccountNumber = "AUBankAccountNumber",
    /** AUDriversLicenseNumber */
    AUDriversLicenseNumber = "AUDriversLicenseNumber",
    /** AUMedicalAccountNumber */
    AUMedicalAccountNumber = "AUMedicalAccountNumber",
    /** AUPassportNumber */
    AUPassportNumber = "AUPassportNumber",
    /** AUTaxFileNumber */
    AUTaxFileNumber = "AUTaxFileNumber",
    /** AUBusinessNumber */
    AUBusinessNumber = "AUBusinessNumber",
    /** AUCompanyNumber */
    AUCompanyNumber = "AUCompanyNumber",
    /** ATIdentityCard */
    ATIdentityCard = "ATIdentityCard",
    /** ATTaxIdentificationNumber */
    ATTaxIdentificationNumber = "ATTaxIdentificationNumber",
    /** ATValueAddedTaxNumber */
    ATValueAddedTaxNumber = "ATValueAddedTaxNumber",
    /** AzureDocumentDBAuthKey */
    AzureDocumentDBAuthKey = "AzureDocumentDBAuthKey",
    /** AzureIaasDatabaseConnectionAndSQLString */
    AzureIaasDatabaseConnectionAndSQLString = "AzureIAASDatabaseConnectionAndSQLString",
    /** AzureIoTConnectionString */
    AzureIoTConnectionString = "AzureIoTConnectionString",
    /** AzurePublishSettingPassword */
    AzurePublishSettingPassword = "AzurePublishSettingPassword",
    /** AzureRedisCacheString */
    AzureRedisCacheString = "AzureRedisCacheString",
    /** AzureSAS */
    AzureSAS = "AzureSAS",
    /** AzureServiceBusString */
    AzureServiceBusString = "AzureServiceBusString",
    /** AzureStorageAccountKey */
    AzureStorageAccountKey = "AzureStorageAccountKey",
    /** AzureStorageAccountGeneric */
    AzureStorageAccountGeneric = "AzureStorageAccountGeneric",
    /** BENationalNumber */
    BENationalNumber = "BENationalNumber",
    /** BENationalNumberV2 */
    BENationalNumberV2 = "BENationalNumberV2",
    /** BEValueAddedTaxNumber */
    BEValueAddedTaxNumber = "BEValueAddedTaxNumber",
    /** BrcpfNumber */
    BrcpfNumber = "BRCPFNumber",
    /** BRLegalEntityNumber */
    BRLegalEntityNumber = "BRLegalEntityNumber",
    /** BRNationalIdrg */
    BRNationalIdrg = "BRNationalIDRG",
    /** BGUniformCivilNumber */
    BGUniformCivilNumber = "BGUniformCivilNumber",
    /** CABankAccountNumber */
    CABankAccountNumber = "CABankAccountNumber",
    /** CADriversLicenseNumber */
    CADriversLicenseNumber = "CADriversLicenseNumber",
    /** CAHealthServiceNumber */
    CAHealthServiceNumber = "CAHealthServiceNumber",
    /** CAPassportNumber */
    CAPassportNumber = "CAPassportNumber",
    /** CAPersonalHealthIdentification */
    CAPersonalHealthIdentification = "CAPersonalHealthIdentification",
    /** CASocialInsuranceNumber */
    CASocialInsuranceNumber = "CASocialInsuranceNumber",
    /** CLIdentityCardNumber */
    CLIdentityCardNumber = "CLIdentityCardNumber",
    /** CNResidentIdentityCardNumber */
    CNResidentIdentityCardNumber = "CNResidentIdentityCardNumber",
    /** CreditCardNumber */
    CreditCardNumber = "CreditCardNumber",
    /** HRIdentityCardNumber */
    HRIdentityCardNumber = "HRIdentityCardNumber",
    /** HRNationalIDNumber */
    HRNationalIDNumber = "HRNationalIDNumber",
    /** HRPersonalIdentificationNumber */
    HRPersonalIdentificationNumber = "HRPersonalIdentificationNumber",
    /** HRPersonalIdentificationOIBNumberV2 */
    HRPersonalIdentificationOIBNumberV2 = "HRPersonalIdentificationOIBNumberV2",
    /** CYIdentityCard */
    CYIdentityCard = "CYIdentityCard",
    /** CYTaxIdentificationNumber */
    CYTaxIdentificationNumber = "CYTaxIdentificationNumber",
    /** CZPersonalIdentityNumber */
    CZPersonalIdentityNumber = "CZPersonalIdentityNumber",
    /** CZPersonalIdentityV2 */
    CZPersonalIdentityV2 = "CZPersonalIdentityV2",
    /** DKPersonalIdentificationNumber */
    DKPersonalIdentificationNumber = "DKPersonalIdentificationNumber",
    /** DKPersonalIdentificationV2 */
    DKPersonalIdentificationV2 = "DKPersonalIdentificationV2",
    /** DrugEnforcementAgencyNumber */
    DrugEnforcementAgencyNumber = "DrugEnforcementAgencyNumber",
    /** EEPersonalIdentificationCode */
    EEPersonalIdentificationCode = "EEPersonalIdentificationCode",
    /** EUDebitCardNumber */
    EUDebitCardNumber = "EUDebitCardNumber",
    /** EUDriversLicenseNumber */
    EUDriversLicenseNumber = "EUDriversLicenseNumber",
    /** EugpsCoordinates */
    EugpsCoordinates = "EUGPSCoordinates",
    /** EUNationalIdentificationNumber */
    EUNationalIdentificationNumber = "EUNationalIdentificationNumber",
    /** EUPassportNumber */
    EUPassportNumber = "EUPassportNumber",
    /** EUSocialSecurityNumber */
    EUSocialSecurityNumber = "EUSocialSecurityNumber",
    /** EUTaxIdentificationNumber */
    EUTaxIdentificationNumber = "EUTaxIdentificationNumber",
    /** FIEuropeanHealthNumber */
    FIEuropeanHealthNumber = "FIEuropeanHealthNumber",
    /** FINationalID */
    FINationalID = "FINationalID",
    /** FINationalIDV2 */
    FINationalIDV2 = "FINationalIDV2",
    /** FIPassportNumber */
    FIPassportNumber = "FIPassportNumber",
    /** FRDriversLicenseNumber */
    FRDriversLicenseNumber = "FRDriversLicenseNumber",
    /** FRHealthInsuranceNumber */
    FRHealthInsuranceNumber = "FRHealthInsuranceNumber",
    /** FRNationalID */
    FRNationalID = "FRNationalID",
    /** FRPassportNumber */
    FRPassportNumber = "FRPassportNumber",
    /** FRSocialSecurityNumber */
    FRSocialSecurityNumber = "FRSocialSecurityNumber",
    /** FRTaxIdentificationNumber */
    FRTaxIdentificationNumber = "FRTaxIdentificationNumber",
    /** FRValueAddedTaxNumber */
    FRValueAddedTaxNumber = "FRValueAddedTaxNumber",
    /** DEDriversLicenseNumber */
    DEDriversLicenseNumber = "DEDriversLicenseNumber",
    /** DEPassportNumber */
    DEPassportNumber = "DEPassportNumber",
    /** DEIdentityCardNumber */
    DEIdentityCardNumber = "DEIdentityCardNumber",
    /** DETaxIdentificationNumber */
    DETaxIdentificationNumber = "DETaxIdentificationNumber",
    /** DEValueAddedNumber */
    DEValueAddedNumber = "DEValueAddedNumber",
    /** GRNationalIDCard */
    GRNationalIDCard = "GRNationalIDCard",
    /** GRNationalIDV2 */
    GRNationalIDV2 = "GRNationalIDV2",
    /** GRTaxIdentificationNumber */
    GRTaxIdentificationNumber = "GRTaxIdentificationNumber",
    /** HKIdentityCardNumber */
    HKIdentityCardNumber = "HKIdentityCardNumber",
    /** HUValueAddedNumber */
    HUValueAddedNumber = "HUValueAddedNumber",
    /** HUPersonalIdentificationNumber */
    HUPersonalIdentificationNumber = "HUPersonalIdentificationNumber",
    /** HUTaxIdentificationNumber */
    HUTaxIdentificationNumber = "HUTaxIdentificationNumber",
    /** INPermanentAccount */
    INPermanentAccount = "INPermanentAccount",
    /** INUniqueIdentificationNumber */
    INUniqueIdentificationNumber = "INUniqueIdentificationNumber",
    /** IDIdentityCardNumber */
    IDIdentityCardNumber = "IDIdentityCardNumber",
    /** InternationalBankingAccountNumber */
    InternationalBankingAccountNumber = "InternationalBankingAccountNumber",
    /** IEPersonalPublicServiceNumber */
    IEPersonalPublicServiceNumber = "IEPersonalPublicServiceNumber",
    /** IEPersonalPublicServiceNumberV2 */
    IEPersonalPublicServiceNumberV2 = "IEPersonalPublicServiceNumberV2",
    /** ILBankAccountNumber */
    ILBankAccountNumber = "ILBankAccountNumber",
    /** ILNationalID */
    ILNationalID = "ILNationalID",
    /** ITDriversLicenseNumber */
    ITDriversLicenseNumber = "ITDriversLicenseNumber",
    /** ITFiscalCode */
    ITFiscalCode = "ITFiscalCode",
    /** ITValueAddedTaxNumber */
    ITValueAddedTaxNumber = "ITValueAddedTaxNumber",
    /** JPBankAccountNumber */
    JPBankAccountNumber = "JPBankAccountNumber",
    /** JPDriversLicenseNumber */
    JPDriversLicenseNumber = "JPDriversLicenseNumber",
    /** JPPassportNumber */
    JPPassportNumber = "JPPassportNumber",
    /** JPResidentRegistrationNumber */
    JPResidentRegistrationNumber = "JPResidentRegistrationNumber",
    /** JPSocialInsuranceNumber */
    JPSocialInsuranceNumber = "JPSocialInsuranceNumber",
    /** JPMyNumberCorporate */
    JPMyNumberCorporate = "JPMyNumberCorporate",
    /** JPMyNumberPersonal */
    JPMyNumberPersonal = "JPMyNumberPersonal",
    /** JPResidenceCardNumber */
    JPResidenceCardNumber = "JPResidenceCardNumber",
    /** LVPersonalCode */
    LVPersonalCode = "LVPersonalCode",
    /** LTPersonalCode */
    LTPersonalCode = "LTPersonalCode",
    /** LUNationalIdentificationNumberNatural */
    LUNationalIdentificationNumberNatural = "LUNationalIdentificationNumberNatural",
    /** LUNationalIdentificationNumberNonNatural */
    LUNationalIdentificationNumberNonNatural = "LUNationalIdentificationNumberNonNatural",
    /** MYIdentityCardNumber */
    MYIdentityCardNumber = "MYIdentityCardNumber",
    /** MTIdentityCardNumber */
    MTIdentityCardNumber = "MTIdentityCardNumber",
    /** MTTaxIDNumber */
    MTTaxIDNumber = "MTTaxIDNumber",
    /** NLCitizensServiceNumber */
    NLCitizensServiceNumber = "NLCitizensServiceNumber",
    /** NLCitizensServiceNumberV2 */
    NLCitizensServiceNumberV2 = "NLCitizensServiceNumberV2",
    /** NLTaxIdentificationNumber */
    NLTaxIdentificationNumber = "NLTaxIdentificationNumber",
    /** NLValueAddedTaxNumber */
    NLValueAddedTaxNumber = "NLValueAddedTaxNumber",
    /** NZBankAccountNumber */
    NZBankAccountNumber = "NZBankAccountNumber",
    /** NZDriversLicenseNumber */
    NZDriversLicenseNumber = "NZDriversLicenseNumber",
    /** NZInlandRevenueNumber */
    NZInlandRevenueNumber = "NZInlandRevenueNumber",
    /** NZMinistryOfHealthNumber */
    NZMinistryOfHealthNumber = "NZMinistryOfHealthNumber",
    /** NZSocialWelfareNumber */
    NZSocialWelfareNumber = "NZSocialWelfareNumber",
    /** NOIdentityNumber */
    NOIdentityNumber = "NOIdentityNumber",
    /** PHUnifiedMultiPurposeIDNumber */
    PHUnifiedMultiPurposeIDNumber = "PHUnifiedMultiPurposeIDNumber",
    /** PLIdentityCard */
    PLIdentityCard = "PLIdentityCard",
    /** PLNationalID */
    PLNationalID = "PLNationalID",
    /** PLNationalIDV2 */
    PLNationalIDV2 = "PLNationalIDV2",
    /** PLPassportNumber */
    PLPassportNumber = "PLPassportNumber",
    /** PLTaxIdentificationNumber */
    PLTaxIdentificationNumber = "PLTaxIdentificationNumber",
    /** PlregonNumber */
    PlregonNumber = "PLREGONNumber",
    /** PTCitizenCardNumber */
    PTCitizenCardNumber = "PTCitizenCardNumber",
    /** PTCitizenCardNumberV2 */
    PTCitizenCardNumberV2 = "PTCitizenCardNumberV2",
    /** PTTaxIdentificationNumber */
    PTTaxIdentificationNumber = "PTTaxIdentificationNumber",
    /** ROPersonalNumericalCode */
    ROPersonalNumericalCode = "ROPersonalNumericalCode",
    /** RUPassportNumberDomestic */
    RUPassportNumberDomestic = "RUPassportNumberDomestic",
    /** RUPassportNumberInternational */
    RUPassportNumberInternational = "RUPassportNumberInternational",
    /** SANationalID */
    SANationalID = "SANationalID",
    /** SGNationalRegistrationIdentityCardNumber */
    SGNationalRegistrationIdentityCardNumber = "SGNationalRegistrationIdentityCardNumber",
    /** SKPersonalNumber */
    SKPersonalNumber = "SKPersonalNumber",
    /** SITaxIdentificationNumber */
    SITaxIdentificationNumber = "SITaxIdentificationNumber",
    /** SIUniqueMasterCitizenNumber */
    SIUniqueMasterCitizenNumber = "SIUniqueMasterCitizenNumber",
    /** ZAIdentificationNumber */
    ZAIdentificationNumber = "ZAIdentificationNumber",
    /** KRResidentRegistrationNumber */
    KRResidentRegistrationNumber = "KRResidentRegistrationNumber",
    /** Esdni */
    Esdni = "ESDNI",
    /** ESSocialSecurityNumber */
    ESSocialSecurityNumber = "ESSocialSecurityNumber",
    /** ESTaxIdentificationNumber */
    ESTaxIdentificationNumber = "ESTaxIdentificationNumber",
    /** SQLServerConnectionString */
    SQLServerConnectionString = "SQLServerConnectionString",
    /** SENationalID */
    SENationalID = "SENationalID",
    /** SENationalIDV2 */
    SENationalIDV2 = "SENationalIDV2",
    /** SEPassportNumber */
    SEPassportNumber = "SEPassportNumber",
    /** SETaxIdentificationNumber */
    SETaxIdentificationNumber = "SETaxIdentificationNumber",
    /** SwiftCode */
    SwiftCode = "SWIFTCode",
    /** CHSocialSecurityNumber */
    CHSocialSecurityNumber = "CHSocialSecurityNumber",
    /** TWNationalID */
    TWNationalID = "TWNationalID",
    /** TWPassportNumber */
    TWPassportNumber = "TWPassportNumber",
    /** TWResidentCertificate */
    TWResidentCertificate = "TWResidentCertificate",
    /** THPopulationIdentificationCode */
    THPopulationIdentificationCode = "THPopulationIdentificationCode",
    /** TRNationalIdentificationNumber */
    TRNationalIdentificationNumber = "TRNationalIdentificationNumber",
    /** UKDriversLicenseNumber */
    UKDriversLicenseNumber = "UKDriversLicenseNumber",
    /** UKElectoralRollNumber */
    UKElectoralRollNumber = "UKElectoralRollNumber",
    /** UKNationalHealthNumber */
    UKNationalHealthNumber = "UKNationalHealthNumber",
    /** UKNationalInsuranceNumber */
    UKNationalInsuranceNumber = "UKNationalInsuranceNumber",
    /** UKUniqueTaxpayerNumber */
    UKUniqueTaxpayerNumber = "UKUniqueTaxpayerNumber",
    /** UsukPassportNumber */
    UsukPassportNumber = "USUKPassportNumber",
    /** USBankAccountNumber */
    USBankAccountNumber = "USBankAccountNumber",
    /** USDriversLicenseNumber */
    USDriversLicenseNumber = "USDriversLicenseNumber",
    /** USIndividualTaxpayerIdentification */
    USIndividualTaxpayerIdentification = "USIndividualTaxpayerIdentification",
    /** USSocialSecurityNumber */
    USSocialSecurityNumber = "USSocialSecurityNumber",
    /** UAPassportNumberDomestic */
    UAPassportNumberDomestic = "UAPassportNumberDomestic",
    /** UAPassportNumberInternational */
    UAPassportNumberInternational = "UAPassportNumberInternational",
    /** Organization */
    Organization = "Organization",
    /** Email */
    Email = "Email",
    /** URL */
    URL = "URL",
    /** Age */
    Age = "Age",
    /** PhoneNumber */
    PhoneNumber = "PhoneNumber",
    /** IPAddress */
    IPAddress = "IPAddress",
    /** Date */
    Date = "Date",
    /** Person */
    Person = "Person",
    /** Address */
    Address = "Address",
    /** All */
    All = "All",
    /** Default */
    Default = "Default"
}

/** Known values of {@link PiiEntityDomain} that the service accepts. */
export declare enum KnownPiiEntityDomain {
    /** Indicates that entities in the Personal Health Information domain should be redacted. */
    Phi = "phi",
    /** Indicates that no domain is specified. */
    None = "none"
}

/** Known values of {@link RangeKind} that the service accepts. */
export declare enum KnownRangeKind {
    /** Number */
    Number = "Number",
    /** Speed */
    Speed = "Speed",
    /** Weight */
    Weight = "Weight",
    /** Length */
    Length = "Length",
    /** Volume */
    Volume = "Volume",
    /** Area */
    Area = "Area",
    /** Age */
    Age = "Age",
    /** Information */
    Information = "Information",
    /** Temperature */
    Temperature = "Temperature",
    /** Currency */
    Currency = "Currency"
}

/** Known values of {@link RelationType} that the service accepts. */
export declare enum KnownRelationType {
    /** Abbreviation */
    Abbreviation = "Abbreviation",
    /** DirectionOfBodyStructure */
    DirectionOfBodyStructure = "DirectionOfBodyStructure",
    /** DirectionOfCondition */
    DirectionOfCondition = "DirectionOfCondition",
    /** DirectionOfExamination */
    DirectionOfExamination = "DirectionOfExamination",
    /** DirectionOfTreatment */
    DirectionOfTreatment = "DirectionOfTreatment",
    /** DosageOfMedication */
    DosageOfMedication = "DosageOfMedication",
    /** FormOfMedication */
    FormOfMedication = "FormOfMedication",
    /** FrequencyOfMedication */
    FrequencyOfMedication = "FrequencyOfMedication",
    /** FrequencyOfTreatment */
    FrequencyOfTreatment = "FrequencyOfTreatment",
    /** QualifierOfCondition */
    QualifierOfCondition = "QualifierOfCondition",
    /** RelationOfExamination */
    RelationOfExamination = "RelationOfExamination",
    /** RouteOfMedication */
    RouteOfMedication = "RouteOfMedication",
    /** TimeOfCondition */
    TimeOfCondition = "TimeOfCondition",
    /** TimeOfEvent */
    TimeOfEvent = "TimeOfEvent",
    /** TimeOfExamination */
    TimeOfExamination = "TimeOfExamination",
    /** TimeOfMedication */
    TimeOfMedication = "TimeOfMedication",
    /** TimeOfTreatment */
    TimeOfTreatment = "TimeOfTreatment",
    /** UnitOfCondition */
    UnitOfCondition = "UnitOfCondition",
    /** UnitOfExamination */
    UnitOfExamination = "UnitOfExamination",
    /** ValueOfCondition */
    ValueOfCondition = "ValueOfCondition",
    /** ValueOfExamination */
    ValueOfExamination = "ValueOfExamination"
}

/** Known values of {@link RelativeTo} that the service accepts. */
export declare enum KnownRelativeTo {
    /** Current */
    Current = "Current",
    /** End */
    End = "End",
    /** Start */
    Start = "Start"
}

/** Known values of {@link ResolutionKind} that the service accepts. */
export declare enum KnownResolutionKind {
    /** BooleanResolution */
    BooleanResolution = "BooleanResolution",
    /** DateTimeResolution */
    DateTimeResolution = "DateTimeResolution",
    /** NumberResolution */
    NumberResolution = "NumberResolution",
    /** OrdinalResolution */
    OrdinalResolution = "OrdinalResolution",
    /** SpeedResolution */
    SpeedResolution = "SpeedResolution",
    /** WeightResolution */
    WeightResolution = "WeightResolution",
    /** LengthResolution */
    LengthResolution = "LengthResolution",
    /** VolumeResolution */
    VolumeResolution = "VolumeResolution",
    /** AreaResolution */
    AreaResolution = "AreaResolution",
    /** AgeResolution */
    AgeResolution = "AgeResolution",
    /** InformationResolution */
    InformationResolution = "InformationResolution",
    /** TemperatureResolution */
    TemperatureResolution = "TemperatureResolution",
    /** CurrencyResolution */
    CurrencyResolution = "CurrencyResolution",
    /** NumericRangeResolution */
    NumericRangeResolution = "NumericRangeResolution",
    /** TemporalSpanResolution */
    TemporalSpanResolution = "TemporalSpanResolution"
}

/** Known values of {@link ScriptKind} that the service accepts. */
export declare enum KnownScriptKind {
    /** Latin */
    Latin = "Latin"
}

/** Known values of {@link SpeedUnit} that the service accepts. */
export declare enum KnownSpeedUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** MeterPerSecond */
    MeterPerSecond = "MeterPerSecond",
    /** KilometerPerHour */
    KilometerPerHour = "KilometerPerHour",
    /** KilometerPerMinute */
    KilometerPerMinute = "KilometerPerMinute",
    /** KilometerPerSecond */
    KilometerPerSecond = "KilometerPerSecond",
    /** MilePerHour */
    MilePerHour = "MilePerHour",
    /** Knot */
    Knot = "Knot",
    /** FootPerSecond */
    FootPerSecond = "FootPerSecond",
    /** FootPerMinute */
    FootPerMinute = "FootPerMinute",
    /** YardPerMinute */
    YardPerMinute = "YardPerMinute",
    /** YardPerSecond */
    YardPerSecond = "YardPerSecond",
    /** MeterPerMillisecond */
    MeterPerMillisecond = "MeterPerMillisecond",
    /** CentimeterPerMillisecond */
    CentimeterPerMillisecond = "CentimeterPerMillisecond",
    /** KilometerPerMillisecond */
    KilometerPerMillisecond = "KilometerPerMillisecond"
}

/** Known values of {@link StringIndexType} that the service accepts. */
export declare enum KnownStringIndexType {
    /** Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. */
    TextElementsV8 = "TextElements_v8",
    /** Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. */
    UnicodeCodePoint = "UnicodeCodePoint",
    /** Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript. */
    Utf16CodeUnit = "Utf16CodeUnit"
}

/** Known values of {@link TemperatureUnit} that the service accepts. */
export declare enum KnownTemperatureUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Fahrenheit */
    Fahrenheit = "Fahrenheit",
    /** Kelvin */
    Kelvin = "Kelvin",
    /** Rankine */
    Rankine = "Rankine",
    /** Celsius */
    Celsius = "Celsius"
}

/** Known values of {@link TemporalModifier} that the service accepts. */
export declare enum KnownTemporalModifier {
    /** AfterApprox */
    AfterApprox = "AfterApprox",
    /** Before */
    Before = "Before",
    /** BeforeStart */
    BeforeStart = "BeforeStart",
    /** Approx */
    Approx = "Approx",
    /** ReferenceUndefined */
    ReferenceUndefined = "ReferenceUndefined",
    /** SinceEnd */
    SinceEnd = "SinceEnd",
    /** AfterMid */
    AfterMid = "AfterMid",
    /** Start */
    Start = "Start",
    /** After */
    After = "After",
    /** BeforeEnd */
    BeforeEnd = "BeforeEnd",
    /** Until */
    Until = "Until",
    /** End */
    End = "End",
    /** Less */
    Less = "Less",
    /** Since */
    Since = "Since",
    /** AfterStart */
    AfterStart = "AfterStart",
    /** BeforeApprox */
    BeforeApprox = "BeforeApprox",
    /** Mid */
    Mid = "Mid",
    /** More */
    More = "More"
}

/**
 * Enum of possible error codes of a {@link TextAnalysisError}.
 */
export declare const KnownTextAnalysisErrorCode: {
    InvalidRequest: KnownInnerErrorCode.InvalidRequest;
    InvalidParameterValue: KnownInnerErrorCode.InvalidParameterValue;
    KnowledgeBaseNotFound: KnownInnerErrorCode.KnowledgeBaseNotFound;
    AzureCognitiveSearchNotFound: KnownInnerErrorCode.AzureCognitiveSearchNotFound;
    AzureCognitiveSearchThrottling: KnownInnerErrorCode.AzureCognitiveSearchThrottling;
    ExtractionFailure: KnownInnerErrorCode.ExtractionFailure;
    InvalidRequestBodyFormat: KnownInnerErrorCode.InvalidRequestBodyFormat;
    EmptyRequest: KnownInnerErrorCode.EmptyRequest;
    MissingInputDocuments: KnownInnerErrorCode.MissingInputDocuments;
    InvalidDocument: KnownInnerErrorCode.InvalidDocument;
    ModelVersionIncorrect: KnownInnerErrorCode.ModelVersionIncorrect;
    InvalidDocumentBatch: KnownInnerErrorCode.InvalidDocumentBatch;
    UnsupportedLanguageCode: KnownInnerErrorCode.UnsupportedLanguageCode;
    InvalidCountryHint: KnownInnerErrorCode.InvalidCountryHint;
    InvalidArgument: KnownErrorCode.InvalidArgument;
    Unauthorized: KnownErrorCode.Unauthorized;
    Forbidden: KnownErrorCode.Forbidden;
    NotFound: KnownErrorCode.NotFound;
    ProjectNotFound: KnownErrorCode.ProjectNotFound;
    OperationNotFound: KnownErrorCode.OperationNotFound;
    AzureCognitiveSearchIndexNotFound: KnownErrorCode.AzureCognitiveSearchIndexNotFound;
    TooManyRequests: KnownErrorCode.TooManyRequests;
    AzureCognitiveSearchIndexLimitReached: KnownErrorCode.AzureCognitiveSearchIndexLimitReached;
    InternalServerError: KnownErrorCode.InternalServerError;
    ServiceUnavailable: KnownErrorCode.ServiceUnavailable;
    Timeout: KnownErrorCode.Timeout;
    QuotaExceeded: KnownErrorCode.QuotaExceeded;
    Conflict: KnownErrorCode.Conflict;
    Warning: KnownErrorCode.Warning;
};

/** Known values of {@link VolumeUnit} that the service accepts. */
export declare enum KnownVolumeUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** CubicMeter */
    CubicMeter = "CubicMeter",
    /** CubicCentimeter */
    CubicCentimeter = "CubicCentimeter",
    /** CubicMillimeter */
    CubicMillimeter = "CubicMillimeter",
    /** Hectoliter */
    Hectoliter = "Hectoliter",
    /** Decaliter */
    Decaliter = "Decaliter",
    /** Liter */
    Liter = "Liter",
    /** Centiliter */
    Centiliter = "Centiliter",
    /** Milliliter */
    Milliliter = "Milliliter",
    /** CubicYard */
    CubicYard = "CubicYard",
    /** CubicInch */
    CubicInch = "CubicInch",
    /** CubicFoot */
    CubicFoot = "CubicFoot",
    /** CubicMile */
    CubicMile = "CubicMile",
    /** FluidOunce */
    FluidOunce = "FluidOunce",
    /** Teaspoon */
    Teaspoon = "Teaspoon",
    /** Tablespoon */
    Tablespoon = "Tablespoon",
    /** Pint */
    Pint = "Pint",
    /** Quart */
    Quart = "Quart",
    /** Cup */
    Cup = "Cup",
    /** Gill */
    Gill = "Gill",
    /** Pinch */
    Pinch = "Pinch",
    /** FluidDram */
    FluidDram = "FluidDram",
    /** Barrel */
    Barrel = "Barrel",
    /** Minim */
    Minim = "Minim",
    /** Cord */
    Cord = "Cord",
    /** Peck */
    Peck = "Peck",
    /** Bushel */
    Bushel = "Bushel",
    /** Hogshead */
    Hogshead = "Hogshead"
}

/** Known values of {@link WeightUnit} that the service accepts. */
export declare enum KnownWeightUnit {
    /** Unspecified */
    Unspecified = "Unspecified",
    /** Kilogram */
    Kilogram = "Kilogram",
    /** Gram */
    Gram = "Gram",
    /** Milligram */
    Milligram = "Milligram",
    /** Gallon */
    Gallon = "Gallon",
    /** MetricTon */
    MetricTon = "MetricTon",
    /** Ton */
    Ton = "Ton",
    /** Pound */
    Pound = "Pound",
    /** Ounce */
    Ounce = "Ounce",
    /** Grain */
    Grain = "Grain",
    /** PennyWeight */
    PennyWeight = "PennyWeight",
    /** LongTonBritish */
    LongTonBritish = "LongTonBritish",
    /** ShortTonUS */
    ShortTonUS = "ShortTonUS",
    /** ShortHundredWeightUS */
    ShortHundredWeightUS = "ShortHundredWeightUS",
    /** Stone */
    Stone = "Stone",
    /** Dram */
    Dram = "Dram"
}

/** Options for a language detection action. */
export declare interface LanguageDetectionAction extends ActionPrebuilt {
}

/**
 * An error result from a language detection action on a single document.
 */
export declare type LanguageDetectionErrorResult = TextAnalysisErrorResult;

/** An input to the language detection operation. This object specifies a unique document id, as well as the full text of a document and a hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */
export declare interface LanguageDetectionInput {
    /** Unique, non-empty document identifier. */
    id: string;
    /** Full text of the input document. */
    text: string;
    /** A hint indicating the document's country of origin to assist the Language predictive model in detecting the document's language. */
    countryHint?: string;
}

/**
 * The result of a language detection action on a single document.
 */
export declare type LanguageDetectionResult = LanguageDetectionSuccessResult | LanguageDetectionErrorResult;

/**
 * The result of a language detection action on a single document,
 * containing a prediction of what language the document is written in.
 */
export declare interface LanguageDetectionSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The top detected language by confidence score.
     */
    readonly primaryLanguage: DetectedLanguage;
}

/** Represents the length entity resolution model. */
export declare interface LengthResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "LengthResolution";
    /** The length Unit of measurement */
    unit: LengthUnit;
}

/**
 * Defines values for LengthUnit. \
 * {@link KnownLengthUnit} can be used interchangeably with LengthUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **Kilometer** \
 * **Hectometer** \
 * **Decameter** \
 * **Meter** \
 * **Decimeter** \
 * **Centimeter** \
 * **Millimeter** \
 * **Micrometer** \
 * **Nanometer** \
 * **Picometer** \
 * **Mile** \
 * **Yard** \
 * **Inch** \
 * **Foot** \
 * **LightYear** \
 * **Pt**
 */
export declare type LengthUnit = string;

/** A word or phrase identified as a well-known entity within a database, including its formal (disambiguated) name and a link to the entity information within the source database. */
export declare interface LinkedEntity {
    /** Entity Linking formal name. */
    name: string;
    /** List of instances this entity appears in the text. */
    matches: Match[];
    /** Language used in the data source. */
    language: string;
    /** Unique identifier of the recognized entity from the data source. */
    dataSourceEntityId?: string;
    /** URL for the entity's page from the data source. */
    url: string;
    /** Data source used to extract entity linking, such as Wiki/Bing etc. */
    dataSource: string;
    /** Bing Entity Search API unique identifier of the recognized entity. */
    bingEntitySearchApiId?: string;
}

/** Details about the specific substring in a document that refers to a linked entity identified by the Language model. */
export declare interface Match {
    /** If a well known item is recognized, a decimal number denoting the confidence level between 0 and 1 will be returned. */
    confidenceScore: number;
    /** Entity text as appears in the request. */
    text: string;
    /** Start position for the entity match text. */
    offset: number;
    /** Length for the entity match text. */
    length: number;
}

/**
 * Defines values for NumberKind. \
 * {@link KnownNumberKind} can be used interchangeably with NumberKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Integer** \
 * **Decimal** \
 * **Power** \
 * **Fraction** \
 * **Percent** \
 * **Unspecified**
 */
export declare type NumberKind = string;

/** A resolution for numeric entity instances. */
export declare interface NumberResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "NumberResolution";
    /** The type of the extracted number entity. */
    numberKind: NumberKind;
    /** A numeric representation of what the extracted text denotes. */
    value: number;
}

/** represents the resolution of numeric intervals. */
export declare interface NumericRangeResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "NumericRangeResolution";
    /** The kind of range that the resolution object represents. */
    rangeKind: RangeKind;
    /** The beginning value of  the interval. */
    minimum: number;
    /** The ending value of the interval. */
    maximum: number;
}

/**
 * A mined opinion object represents an opinion we've extracted from a sentence.
 * It consists of both a target that these assessments are about, and the actual
 * assessments themselves.
 */
export declare interface Opinion {
    /**
     * The target of a product/service that this assessment is about.
     */
    readonly target: TargetSentiment;
    /**
     * The actual assessments of the target.
     */
    readonly assessments: AssessmentSentiment[];
}

/** A resolution for ordinal numbers entity instances. */
export declare interface OrdinalResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "OrdinalResolution";
    /** The offset With respect to the reference (e.g., offset = -1 in "show me the second to last" */
    offset: string;
    /** The reference point that the ordinal number denotes. */
    relativeTo: RelativeTo;
    /** A simple arithmetic expression that the ordinal denotes. */
    value: string;
}

/**
 * Paged results of the {@link TextAnalysisClient.beginAnalyzeBatch} operation.
 */
export declare type PagedAnalyzeBatchResult = PagedAsyncIterableIterator<AnalyzeBatchResult>;

/**
 * Defines values for PiiEntityCategory. \
 * {@link KnownPiiEntityCategory} can be used interchangeably with PiiEntityCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ABARoutingNumber** \
 * **ARNationalIdentityNumber** \
 * **AUBankAccountNumber** \
 * **AUDriversLicenseNumber** \
 * **AUMedicalAccountNumber** \
 * **AUPassportNumber** \
 * **AUTaxFileNumber** \
 * **AUBusinessNumber** \
 * **AUCompanyNumber** \
 * **ATIdentityCard** \
 * **ATTaxIdentificationNumber** \
 * **ATValueAddedTaxNumber** \
 * **AzureDocumentDBAuthKey** \
 * **AzureIAASDatabaseConnectionAndSQLString** \
 * **AzureIoTConnectionString** \
 * **AzurePublishSettingPassword** \
 * **AzureRedisCacheString** \
 * **AzureSAS** \
 * **AzureServiceBusString** \
 * **AzureStorageAccountKey** \
 * **AzureStorageAccountGeneric** \
 * **BENationalNumber** \
 * **BENationalNumberV2** \
 * **BEValueAddedTaxNumber** \
 * **BRCPFNumber** \
 * **BRLegalEntityNumber** \
 * **BRNationalIDRG** \
 * **BGUniformCivilNumber** \
 * **CABankAccountNumber** \
 * **CADriversLicenseNumber** \
 * **CAHealthServiceNumber** \
 * **CAPassportNumber** \
 * **CAPersonalHealthIdentification** \
 * **CASocialInsuranceNumber** \
 * **CLIdentityCardNumber** \
 * **CNResidentIdentityCardNumber** \
 * **CreditCardNumber** \
 * **HRIdentityCardNumber** \
 * **HRNationalIDNumber** \
 * **HRPersonalIdentificationNumber** \
 * **HRPersonalIdentificationOIBNumberV2** \
 * **CYIdentityCard** \
 * **CYTaxIdentificationNumber** \
 * **CZPersonalIdentityNumber** \
 * **CZPersonalIdentityV2** \
 * **DKPersonalIdentificationNumber** \
 * **DKPersonalIdentificationV2** \
 * **DrugEnforcementAgencyNumber** \
 * **EEPersonalIdentificationCode** \
 * **EUDebitCardNumber** \
 * **EUDriversLicenseNumber** \
 * **EUGPSCoordinates** \
 * **EUNationalIdentificationNumber** \
 * **EUPassportNumber** \
 * **EUSocialSecurityNumber** \
 * **EUTaxIdentificationNumber** \
 * **FIEuropeanHealthNumber** \
 * **FINationalID** \
 * **FINationalIDV2** \
 * **FIPassportNumber** \
 * **FRDriversLicenseNumber** \
 * **FRHealthInsuranceNumber** \
 * **FRNationalID** \
 * **FRPassportNumber** \
 * **FRSocialSecurityNumber** \
 * **FRTaxIdentificationNumber** \
 * **FRValueAddedTaxNumber** \
 * **DEDriversLicenseNumber** \
 * **DEPassportNumber** \
 * **DEIdentityCardNumber** \
 * **DETaxIdentificationNumber** \
 * **DEValueAddedNumber** \
 * **GRNationalIDCard** \
 * **GRNationalIDV2** \
 * **GRTaxIdentificationNumber** \
 * **HKIdentityCardNumber** \
 * **HUValueAddedNumber** \
 * **HUPersonalIdentificationNumber** \
 * **HUTaxIdentificationNumber** \
 * **INPermanentAccount** \
 * **INUniqueIdentificationNumber** \
 * **IDIdentityCardNumber** \
 * **InternationalBankingAccountNumber** \
 * **IEPersonalPublicServiceNumber** \
 * **IEPersonalPublicServiceNumberV2** \
 * **ILBankAccountNumber** \
 * **ILNationalID** \
 * **ITDriversLicenseNumber** \
 * **ITFiscalCode** \
 * **ITValueAddedTaxNumber** \
 * **JPBankAccountNumber** \
 * **JPDriversLicenseNumber** \
 * **JPPassportNumber** \
 * **JPResidentRegistrationNumber** \
 * **JPSocialInsuranceNumber** \
 * **JPMyNumberCorporate** \
 * **JPMyNumberPersonal** \
 * **JPResidenceCardNumber** \
 * **LVPersonalCode** \
 * **LTPersonalCode** \
 * **LUNationalIdentificationNumberNatural** \
 * **LUNationalIdentificationNumberNonNatural** \
 * **MYIdentityCardNumber** \
 * **MTIdentityCardNumber** \
 * **MTTaxIDNumber** \
 * **NLCitizensServiceNumber** \
 * **NLCitizensServiceNumberV2** \
 * **NLTaxIdentificationNumber** \
 * **NLValueAddedTaxNumber** \
 * **NZBankAccountNumber** \
 * **NZDriversLicenseNumber** \
 * **NZInlandRevenueNumber** \
 * **NZMinistryOfHealthNumber** \
 * **NZSocialWelfareNumber** \
 * **NOIdentityNumber** \
 * **PHUnifiedMultiPurposeIDNumber** \
 * **PLIdentityCard** \
 * **PLNationalID** \
 * **PLNationalIDV2** \
 * **PLPassportNumber** \
 * **PLTaxIdentificationNumber** \
 * **PLREGONNumber** \
 * **PTCitizenCardNumber** \
 * **PTCitizenCardNumberV2** \
 * **PTTaxIdentificationNumber** \
 * **ROPersonalNumericalCode** \
 * **RUPassportNumberDomestic** \
 * **RUPassportNumberInternational** \
 * **SANationalID** \
 * **SGNationalRegistrationIdentityCardNumber** \
 * **SKPersonalNumber** \
 * **SITaxIdentificationNumber** \
 * **SIUniqueMasterCitizenNumber** \
 * **ZAIdentificationNumber** \
 * **KRResidentRegistrationNumber** \
 * **ESDNI** \
 * **ESSocialSecurityNumber** \
 * **ESTaxIdentificationNumber** \
 * **SQLServerConnectionString** \
 * **SENationalID** \
 * **SENationalIDV2** \
 * **SEPassportNumber** \
 * **SETaxIdentificationNumber** \
 * **SWIFTCode** \
 * **CHSocialSecurityNumber** \
 * **TWNationalID** \
 * **TWPassportNumber** \
 * **TWResidentCertificate** \
 * **THPopulationIdentificationCode** \
 * **TRNationalIdentificationNumber** \
 * **UKDriversLicenseNumber** \
 * **UKElectoralRollNumber** \
 * **UKNationalHealthNumber** \
 * **UKNationalInsuranceNumber** \
 * **UKUniqueTaxpayerNumber** \
 * **USUKPassportNumber** \
 * **USBankAccountNumber** \
 * **USDriversLicenseNumber** \
 * **USIndividualTaxpayerIdentification** \
 * **USSocialSecurityNumber** \
 * **UAPassportNumberDomestic** \
 * **UAPassportNumberInternational** \
 * **Organization** \
 * **Email** \
 * **URL** \
 * **Age** \
 * **PhoneNumber** \
 * **IPAddress** \
 * **Date** \
 * **Person** \
 * **Address** \
 * **All** \
 * **Default**
 */
export declare type PiiEntityCategory = string;

/**
 * Defines values for PiiEntityDomain. \
 * {@link KnownPiiEntityDomain} can be used interchangeably with PiiEntityDomain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **phi**: Indicates that entities in the Personal Health Information domain should be redacted. \
 * **none**: Indicates that no domain is specified.
 */
export declare type PiiEntityDomain = string;

/** Options for a Pii entity recognition action. */
export declare interface PiiEntityRecognitionAction extends ActionPrebuilt {
    /**
     * Filters entities to ones only included in the specified domain (e.g., if set to `Phi`, only entities in the Protected Healthcare Information domain will be returned). For a list of possible domains, see {@link KnownPiiEntityDomain}.
     *
     * See {@link https://aka.ms/tanerpii the service documentation} for more information.
     */
    domainFilter?: PiiEntityDomain;
    /** Filters entities to ones only included in the specified array of categories. For a list of possible categories, see {@link KnownPiiCategory} */
    categoriesFilter?: PiiEntityCategory[];
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for a pii entity recognition batch action. */
export declare interface PiiEntityRecognitionBatchAction extends AnalyzeBatchActionCommon, PiiEntityRecognitionAction {
    /**
     * The kind of the action.
     */
    kind: "PiiEntityRecognition";
}

/**
 * The result of a pii entity recognition batch action.
 */
export declare type PiiEntityRecognitionBatchResult = ActionMetadata & BatchActionResult<PiiEntityRecognitionResult, "PiiEntityRecognition">;

/**
 * An error result from a pii entity recognition action on a single document.
 */
export declare type PiiEntityRecognitionErrorResult = TextAnalysisErrorResult;

/**
 * The result of an entity recognition action on a single document.
 */
export declare type PiiEntityRecognitionResult = PiiEntityRecognitionSuccessResult | PiiEntityRecognitionErrorResult;

/**
 * The result of a pii entity recognition action on a single document,
 * containing the collection of {@link Entity} objects identified in that
 * document.
 */
export declare interface PiiEntityRecognitionSuccessResult extends TextAnalysisSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: Entity[];
    /**
     * The text redacted.
     */
    readonly redactedText: string;
}

/**
 * Abstract representation of a poller, intended to expose just the minimal API that the user needs to work with.
 */
export declare interface PollerLike<TState extends OperationState<TResult>, TResult> extends SimplePollerLike<TState, TResult> {
    /**
     * sends a cancellation request.
     */
    sendCancellationRequest: () => Promise<void>;
}

/** Represents resolutions for quantities. */
export declare interface QuantityResolution {
    /** The numeric value that the extracted text denotes. */
    value: number;
}

/**
 * Defines values for RangeKind. \
 * {@link KnownRangeKind} can be used interchangeably with RangeKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Number** \
 * **Speed** \
 * **Weight** \
 * **Length** \
 * **Volume** \
 * **Area** \
 * **Age** \
 * **Information** \
 * **Temperature** \
 * **Currency**
 */
export declare type RangeKind = string;

/**
 * Defines values for RelationType. \
 * {@link KnownRelationType} can be used interchangeably with RelationType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Abbreviation** \
 * **DirectionOfBodyStructure** \
 * **DirectionOfCondition** \
 * **DirectionOfExamination** \
 * **DirectionOfTreatment** \
 * **DosageOfMedication** \
 * **FormOfMedication** \
 * **FrequencyOfMedication** \
 * **FrequencyOfTreatment** \
 * **QualifierOfCondition** \
 * **RelationOfExamination** \
 * **RouteOfMedication** \
 * **TimeOfCondition** \
 * **TimeOfEvent** \
 * **TimeOfExamination** \
 * **TimeOfMedication** \
 * **TimeOfTreatment** \
 * **UnitOfCondition** \
 * **UnitOfExamination** \
 * **ValueOfCondition** \
 * **ValueOfExamination**
 */
export declare type RelationType = string;

/**
 * Defines values for RelativeTo. \
 * {@link KnownRelativeTo} can be used interchangeably with RelativeTo,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Current** \
 * **End** \
 * **Start**
 */
export declare type RelativeTo = string;

/**
 * Options for the begin analyze actions operation.
 */
export declare interface RestoreAnalyzeBatchPollerOptions extends TextAnalysisOperationOptions {
    /**
     * Time delay between poll requests, in milliseconds.
     */
    updateIntervalInMs?: number;
}

/**
 * Defines values for ScriptKind. \
 * {@link KnownScriptKind} can be used interchangeably with ScriptKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Latin**
 */
export declare type ScriptKind = string;

/**
 * The predicted sentiment for a given span of text. For more information
 * regarding text sentiment, see {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}.
 */
export declare interface SentenceSentiment {
    /**
     * The sentence text.
     */
    readonly text: string;
    /**
     * The predicted Sentiment for the sentence. For a list of possible values,
     * see {@link SentenceSentimentLabel}
     */
    readonly sentiment: SentenceSentimentLabel;
    /**
     * The sentiment confidence score between 0 and 1 for the sentence for all
     * classes.
     */
    readonly confidenceScores: SentimentConfidenceScores;
    /**
     * The sentence text offset from the start of the document.
     */
    readonly offset: number;
    /**
     * The length of the sentence text.
     */
    readonly length: number;
    /**
     * The list of opinions mined from this sentence. For example in "The food is
     * good, but the service is bad", the following two opinions will be returned:
     * "food is good" and "service is bad".
     *
     * It is non-empty only returned if {@link includeOpinionMining} was set to
     * `true`.
     */
    readonly opinions: Opinion[];
}

/** Defines values for SentenceSentimentLabel. */
export declare type SentenceSentimentLabel = "positive" | "neutral" | "negative";

/** Options for a sentiment analysis action. */
export declare interface SentimentAnalysisAction extends ActionPrebuilt {
    /** Enables performing opinion mining on the input documents, a more  granular analysis around the aspects of a product or service (also known as aspect-based sentiment analysis). If set to true, {@link SentenceSentiment.opinions} will contain the results of this analysis. See {@link https://docs.microsoft.com/azure/cognitive-services/language-service/sentiment-opinion-mining/overview#opinion-mining the service documentation} for more information. */
    includeOpinionMining?: boolean;
    /**
     * Specifies the measurement unit used to calculate the offset and length properties. For a list of possible values, see {@link KnownStringIndexType}.
     *
     * The default is the JavaScript's default which is "Utf16CodeUnit".
     */
    stringIndexType?: StringIndexType;
}

/** Options for a sentiment analysis batch action. */
export declare interface SentimentAnalysisBatchAction extends AnalyzeBatchActionCommon, SentimentAnalysisAction {
    /**
     * The kind of the action.
     */
    kind: "SentimentAnalysis";
}

/**
 * The result of a sentiment analysis batch action.
 */
export declare type SentimentAnalysisBatchResult = ActionMetadata & BatchActionResult<SentimentAnalysisResult, "SentimentAnalysis">;

/**
 * An error result from a sentiment analysis action on a single document.
 */
export declare type SentimentAnalysisErrorResult = TextAnalysisErrorResult;

/**
 * The result of a sentiment analysis action on a single document.
 */
export declare type SentimentAnalysisResult = SentimentAnalysisSuccessResult | SentimentAnalysisErrorResult;

/**
 * The result of a sentiment analysis action on a single document,
 * containing the predicted sentiment for each sentence as well as for the full
 * document.
 */
export declare interface SentimentAnalysisSuccessResult extends TextAnalysisSuccessResult {
    /**
     * Predicted sentiment for document. For a list of possible values, see {@link DocumentSentimentLabel}
     */
    readonly sentiment: DocumentSentimentLabel;
    /**
     * Document level sentiment confidence scores between 0 and 1 for each
     * sentiment class.
     */
    readonly confidenceScores: SentimentConfidenceScores;
    /**
     * The predicted sentiment for each sentence in the corresponding document.
     */
    readonly sentences: SentenceSentiment[];
}

/** Represents the confidence scores between 0 and 1 across all sentiment classes: positive, neutral, negative. */
export declare interface SentimentConfidenceScores {
    /** Confidence score for positive sentiment */
    positive: number;
    /** Confidence score for neutral sentiment */
    neutral: number;
    /** Confidence score for negative sentiment */
    negative: number;
}

/** Represents the speed entity resolution model. */
export declare interface SpeedResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "SpeedResolution";
    /** The speed Unit of measurement */
    unit: SpeedUnit;
}

/**
 * Defines values for SpeedUnit. \
 * {@link KnownSpeedUnit} can be used interchangeably with SpeedUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **MeterPerSecond** \
 * **KilometerPerHour** \
 * **KilometerPerMinute** \
 * **KilometerPerSecond** \
 * **MilePerHour** \
 * **Knot** \
 * **FootPerSecond** \
 * **FootPerMinute** \
 * **YardPerMinute** \
 * **YardPerSecond** \
 * **MeterPerMillisecond** \
 * **CentimeterPerMillisecond** \
 * **KilometerPerMillisecond**
 */
export declare type SpeedUnit = string;

/**
 * Defines values for StringIndexType. \
 * {@link KnownStringIndexType} can be used interchangeably with StringIndexType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TextElements_v8**: Returned offset and length values will correspond to TextElements (Graphemes and Grapheme clusters) confirming to the Unicode 8.0.0 standard. Use this option if your application is written in .Net Framework or .Net Core and you will be using StringInfo. \
 * **UnicodeCodePoint**: Returned offset and length values will correspond to Unicode code points. Use this option if your application is written in a language that support Unicode, for example Python. \
 * **Utf16CodeUnit**: Returned offset and length values will correspond to UTF-16 code units. Use this option if your application is written in a language that support Unicode, for example Java, JavaScript.
 */
export declare type StringIndexType = string;

/** The context of the summary. */
export declare interface SummaryContext {
    /** Start position for the context. Use of different 'stringIndexType' values can affect the offset returned. */
    offset: number;
    /** The length of the context. Use of different 'stringIndexType' values can affect the length returned. */
    length: number;
}

/** A sentence that is part of the extracted summary. */
export declare interface SummarySentence {
    /** The extracted sentence text. */
    text: string;
    /** A double value representing the relevance of the sentence within the summary. Higher values indicate higher importance. */
    rankScore: number;
    /** The sentence offset from the start of the document, based on the value of the parameter StringIndexType. */
    offset: number;
    /** The length of the sentence. */
    length: number;
}

/** Represents the confidence scores across all sentiment classes: positive and negative. */
export declare interface TargetConfidenceScores {
    /** Confidence score for positive sentiment */
    positive: number;
    /** Confidence score for negative sentiment */
    negative: number;
}

/**
 * TargetSentiment contains the predicted sentiment, confidence scores and other
 * information about a target of a product. A target of a product/service is a
 * key component of that product/service. For example in "The food at Hotel Foo
 * is good", "food" is a target of "Hotel Foo".
 */
export declare interface TargetSentiment {
    /**
     * The sentiment confidence score between 0 and 1 for the target for
     * 'positive' and 'negative' labels.
     */
    readonly confidenceScores: TargetConfidenceScores;
    /**
     * The predicted Sentiment for the Target. For a list of possible values,
     * see {@link TokenSentimentLabel}
     */
    readonly sentiment: TokenSentimentLabel;
    /**
     * The target text.
     */
    readonly text: string;
    /**
     * The Target text offset from the start of the sentence.
     */
    readonly offset: number;
    /**
     * The length of the Target text.
     */
    readonly length: number;
}

/** Represents the temperature entity resolution model. */
export declare interface TemperatureResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "TemperatureResolution";
    /** The temperature Unit of measurement. */
    unit: TemperatureUnit;
}

/**
 * Defines values for TemperatureUnit. \
 * {@link KnownTemperatureUnit} can be used interchangeably with TemperatureUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **Fahrenheit** \
 * **Kelvin** \
 * **Rankine** \
 * **Celsius**
 */
export declare type TemperatureUnit = string;

/**
 * Defines values for TemporalModifier. \
 * {@link KnownTemporalModifier} can be used interchangeably with TemporalModifier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AfterApprox** \
 * **Before** \
 * **BeforeStart** \
 * **Approx** \
 * **ReferenceUndefined** \
 * **SinceEnd** \
 * **AfterMid** \
 * **Start** \
 * **After** \
 * **BeforeEnd** \
 * **Until** \
 * **End** \
 * **Less** \
 * **Since** \
 * **AfterStart** \
 * **BeforeApprox** \
 * **Mid** \
 * **More**
 */
export declare type TemporalModifier = string;

/** represents the resolution of a date and/or time span. */
export declare interface TemporalSpanResolution extends BaseResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "TemporalSpanResolution";
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    begin?: string;
    /** An extended ISO 8601 date/time representation as described in (https://github.com/Microsoft/Recognizers-Text/blob/master/Patterns/English/English-DateTime.yaml) */
    end?: string;
    /** An optional duration value formatted based on the ISO 8601 (https://en.wikipedia.org/wiki/ISO_8601#Durations) */
    duration?: string;
    /** An optional modifier of a date/time instance. */
    modifier?: TemporalModifier;
    /** An optional triplet containing the beginning, the end, and the duration all stated as ISO 8601 formatted strings. */
    timex?: string;
}

/**
 * A client for interacting with the text analysis features in Azure Cognitive
 * Language Service.
 *
 * The client needs the endpoint of a Language resource and an authentication
 * method such as an API key or AAD. The API key and endpoint can be found in
 * the Language resource page in the Azure portal. They will be located in the
 * resource's Keys and Endpoint page, under Resource Management.
 *
 * ### Examples for authentication:
 *
 * #### API Key
 *
 * ```js
 * import { TextAnalysisClient, AzureKeyCredential } from "@azure/ai-language-text";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new AzureKeyCredential("<api key>");
 *
 * const client = new TextAnalysisClient(endpoint, credential);
 * ```
 *
 * #### Azure Active Directory
 *
 * See the [`@azure/identity`](https://npmjs.com/package/\@azure/identity)
 * package for more information about authenticating with Azure Active Directory.
 *
 * ```js
 * import { TextAnalysisClient } from "@azure/ai-language-text";
 * import { DefaultAzureCredential } from "@azure/identity";
 *
 * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
 * const credential = new DefaultAzureCredential();
 *
 * const client = new TextAnalysisClient(endpoint, credential);
 * ```
 */
export declare class TextAnalysisClient {
    private readonly _client;
    private readonly _tracing;
    private readonly defaultCountryHint;
    private readonly defaultLanguage;
    /**
     * Creates an instance of TextAnalysisClient with the endpoint of a Language
     * resource and an authentication method such as an API key or AAD.
     *
     * The API key and endpoint can be found in the Language resource page in the
     * Azure portal. They will be located in the resource's Keys and Endpoint page,
     * under Resource Management.
     *
     * ### Example
     *
     * ```js
     * import { TextAnalysisClient, AzureKeyCredential } from "@azure/ai-language-text";
     *
     * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
     * const credential = new AzureKeyCredential("<api key>");
     *
     * const client = new TextAnalysisClient(endpoint, credential);
     * ```
     *
     * @param endpointUrl - The URL to the endpoint of a Cognitive Language Service resource
     * @param credential - Key credential to be used to authenticate requests to the service.
     * @param options - Used to configure the TextAnalytics client.
     */
    constructor(endpointUrl: string, credential: KeyCredential, options?: TextAnalysisClientOptions);
    /**
     * Creates an instance of TextAnalysisClient with the endpoint of a Language
     * resource and an authentication method such as an API key or AAD.
     *
     * The API key and endpoint can be found in the Language resource page in the
     * Azure portal. They will be located in the resource's Keys and Endpoint page,
     * under Resource Management.
     *
     * ### Example
     *
     * See the [`@azure/identity`](https://npmjs.com/package/\@azure/identity)
     * package for more information about authenticating with Azure Active Directory.
     *
     * ```js
     * import { TextAnalysisClient } from "@azure/ai-language-text";
     * import { DefaultAzureCredential } from "@azure/identity";
     *
     * const endpoint = "https://<resource name>.cognitiveservices.azure.com";
     * const credential = new DefaultAzureCredential();
     *
     * const client = new TextAnalysisClient(endpoint, credential);
     * ```
     *
     * @param endpointUrl - The URL to the endpoint of a Cognitive Language Service resource
     * @param credential - Token credential to be used to authenticate requests to the service.
     * @param options - Used to configure the TextAnalytics client.
     */
    constructor(endpointUrl: string, credential: TokenCredential, options?: TextAnalysisClientOptions);
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input strings are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Language detection
     *
     * ```js
     * const documents = [<input strings>];
     * const countryHint = "us";
     * const results = await client.analyze("LanguageDetection", documents, countryHint);
     *
     * for (let i = 0; i < results.length; i++) {
     *   const result = results[i];
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { name, confidenceScore, iso6391Name } = result.primaryLanguage;
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview}
     * for more information on language detection.
     *
     * @param actionName - the name of the action to be performed on the input
     *   documents, see ${@link AnalyzeActionName}
     * @param documents - the input documents to be analyzed
     * @param options - optional action parameters and settings for the operation
     *
     * @returns an array of results where each element contains the primary language
     *   for the corresponding input document.
     */
    analyze<ActionName extends "LanguageDetection">(actionName: ActionName, documents: LanguageDetectionInput[], options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>;
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input strings are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Language detection
     *
     * ```js
     * const documents = [<input strings>];
     * const countryHint = "us";
     * const results = await client.analyze("LanguageDetection", documents, countryHint);
     *
     * for (const result of results) {
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { name, confidenceScore, iso6391Name } = result.primaryLanguage;
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview}
     * for more information on language detection.
     *
     * @param actionName - the name of the action to be performed on the input
     *   documents, see ${@link AnalyzeActionName}
     * @param documents - the input documents to be analyzed
     * @param countryHint - Indicates the country of origin for all of
     *   the input strings to assist the model in predicting the language they are
     *   written in.  If unspecified, this value will be set to the default
     *   country hint in `TextAnalysisClientOptions`. If set to an empty string,
     *   or the string "none", the service will apply a model where the country is
     *   explicitly unset. The same country hint is applied to all strings in the
     *   input collection.
     * @param options - optional action parameters and settings for the operation
     *
     * @returns an array of results where each element contains the primary language
     *   for the corresponding input document.
     */
    analyze<ActionName extends "LanguageDetection">(actionName: ActionName, documents: string[], countryHint?: string, options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>;
    /**
     * Runs a predictive model to perform the action of choice on the input
     * documents. See ${@link AnalyzeActionName} for a list of supported
     * actions.
     *
     * The layout of each item in the results array depends on the action chosen.
     * For example, each PIIEntityRecognition document result consists of both
     * `entities` and `redactedText` where the former is a list of all Pii entities
     * in the text and the latter is the original text after all such Pii entities
     * have been redacted from it.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Opinion mining
     *
     * ```js
     * const documents = [{
     *  id: "1",
     *  text: "The food and service aren't the best",
     *  language: "en"
     * }];
     * const results = await client.analyze("SentimentAnalysis", documents, {
     *   includeOpinionMining: true,
     * });
     *
     * for (const result of results) {
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { sentiment, confidenceScores, sentences } = result;
     *     for (const { sentiment, confidenceScores, opinions } of sentences) {
     *       for (const { target, assessments } of opinions) {
     *         const { text, sentiment, confidenceScores } = target;
     *         for (const { text, sentiment } of assessments) {
     *           // Do something
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}
     * for more information on opinion mining.
     *
     * #### Personally identifiable information
     *
     * ```js
     * const documents = [<input documents>];
     * const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];
     * const domainFilter = KnownPiiDomain.Phi;
     * const results = await client.analyze("PiiEntityRecognition", documents, {
     *   domainFilter, categoriesFilter
     * });
     *
     * for (const result of results) {
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { entities, redactedText } = result;
     *     for (const { text, category, confidenceScore, length, offset } of entities) {
     *       // Do something
     *     }
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview}
     * for more information on personally identifiable information.
     *
     * @param actionName - the name of the action to be performed on the input
     *   documents, see ${@link AnalyzeActionName}
     * @param documents - the input documents to be analyzed
     * @param options - optional action parameters and settings for the operation
     *
     * @returns an array of results corresponding to the input documents
     */
    analyze<ActionName extends AnalyzeActionName = AnalyzeActionName>(actionName: ActionName, documents: TextDocumentInput[], options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>;
    /**
     * Runs a predictive model to perform the action of choice on the input
     * strings. See ${@link AnalyzeActionName} for a list of supported
     * actions.
     *
     * The layout of each item in the results array depends on the action chosen.
     * For example, each PIIEntityRecognition document result consists of both
     * `entities` and `redactedText` where the former is a list of all Pii entities
     * in the text and the latter is the original text after all such Pii entities
     * have been redacted from it.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Opinion mining
     *
     * ```js
     * const documents = ["The food and service aren't the best"];
     * const results = await client.analyze("SentimentAnalysis", documents, {
     *   includeOpinionMining: true,
     * });
     *
     * for (const result of results) {
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { sentiment, confidenceScores, sentences } = result;
     *     for (const { sentiment, confidenceScores, opinions } of sentences) {
     *       for (const { target, assessments } of opinions) {
     *         const { text, sentiment, confidenceScores } = target;
     *         for (const { text, sentiment } of assessments) {
     *           // Do something
     *         }
     *       }
     *     }
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview}
     * for more information on opinion mining.
     *
     * #### Personally identifiable information
     *
     * ```js
     * const documents = [<input strings>];
     * const languageHint = "en";
     * const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];
     * const domainFilter = KnownPiiDomain.Phi;
     * const results = await client.analyze("PiiEntityRecognition", documents, languageHint, {
     *   domainFilter, categoriesFilter
     * });
     *
     * for (const result of results) {
     *   if (result.error) {
     *     // a document has an error instead of results
     *   } else {
     *     const { entities, redactedText } = result;
     *     for (const { text, category, confidenceScore, length, offset } of entities) {
     *       // Do something
     *     }
     *   }
     * }
     * ```
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview}
     * for more information on personally identifiable information.
     *
     * @param actionName - the name of the action to be performed on the input
     *   documents, see ${@link AnalyzeActionName}
     * @param documents - the input documents to be analyzed
     * @param languageCode - the code of the language that all the input strings are
     *    written in. If unspecified, this value will be set to the default
     *    language in `TextAnalysisClientOptions`. If set to an empty string,
     *    the service will apply a model where the language is explicitly set to
     *    "None". Language support varies per action, for example, more information
     *    about the languages supported for Entity Recognition actions can be
     *    found in {@link https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support}.
     *    If set to "auto", the service will automatically infer the language from
     *    the input text. If that process fails, the value in the `defaultLanguage`
     *    option will be used.
     * @param options - optional action parameters and settings for the operation
     *
     * @returns an array of results corresponding to the input documents
     */
    analyze<ActionName extends AnalyzeActionName = AnalyzeActionName>(actionName: ActionName, documents: string[], languageCode?: string, options?: AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>;
    /**
     * Performs an array (batch) of actions on the input documents. Each action has
     * a `kind` field that specifies the nature of the action. See ${@link AnalyzeBatchActionNames}
     * for a list of supported actions. In addition to `kind`, actions could also
     * have other parameters such as `disableServiceLogs` and `modelVersion`.
     *
     * The results array contains the results for those input actions where each
     * item also has a `kind` field that specifies the type of the results.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Key phrase extraction and Pii entity recognition
     *
     * ```js
     * const poller = await client.beginAnalyzeBatch(
     *  [{ kind: "KeyPhraseExtraction" }, { kind: "PiiEntityRecognition" }],
     *  documents
     * );
     * const actionResults = await poller.pollUntilDone();
     *
     * for await (const actionResult of actionResults) {
     *  if (actionResult.error) {
     *    throw new Error(`Unexpected error`);
     *  }
     *  switch (actionResult.kind) {
     *    case "KeyPhraseExtraction": {
     *      for (const doc of actionResult.results) {
     *        // do something
     *      }
     *      break;
     *    }
     *    case "PiiEntityRecognition": {
     *      for (const doc of actionResult.results) {
     *        // do something
     *      }
     *      break;
     *    }
     *  }
     * }
     * ```
     *
     * @param actions - an array of actions that will be run on the input documents
     * @param documents - the input documents to be analyzed
     * @param languageCode - the code of the language that all the input strings are
     *    written in. If unspecified, this value will be set to the default
     *    language in `TextAnalysisClientOptions`. If set to an empty string,
     *    the service will apply a model where the language is explicitly set to
     *    "None". Language support varies per action, for example, more information
     *    about the languages supported for Entity Recognition actions can be
     *    found in {@link https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support}.
     *    If set to "auto", the service will automatically infer the language from
     *    the input text. If that process fails, the value in the `defaultLanguage`
     *    option will be used.
     * @param options - optional settings for the operation
     *
     * @returns an array of results corresponding to the input actions
     */
    beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents: string[], languageCode?: string, options?: BeginAnalyzeBatchOptions): Promise<AnalyzeBatchPoller>;
    /**
     * Performs an array (batch) of actions on the input documents. Each action has
     * a `kind` field that specifies the nature of the action. See ${@link AnalyzeBatchActionNames}
     * for a list of supported actions. In addition to `kind`, actions could also
     * have other parameters such as `disableServiceLogs` and `modelVersion`.
     *
     * The results array contains the results for those input actions where each
     * item also has a `kind` field that specifies the type of the results.
     *
     * See {@link https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits}
     * for data limits.
     *
     * ### Examples
     *
     * #### Keyphrase extraction and Pii entity recognition
     *
     * ```js
     * const poller = await client.beginAnalyzeBatch(
     *  [{ kind: "KeyPhraseExtraction" }, { kind: "PiiEntityRecognition" }],
     *  documents
     * );
     * const actionResults = await poller.pollUntilDone();
     *
     * for await (const actionResult of actionResults) {
     *  if (actionResult.error) {
     *    throw new Error(`Unexpected error`);
     *  }
     *  switch (actionResult.kind) {
     *    case "KeyPhraseExtraction": {
     *      for (const doc of actionResult.results) {
     *        // do something
     *      }
     *      break;
     *    }
     *    case "PiiEntityRecognition": {
     *      for (const doc of actionResult.results) {
     *        // do something
     *      }
     *      break;
     *    }
     *  }
     * }
     * ```
     *
     * @param actions - an array of actions that will be run on the input documents
     * @param documents - the input documents to be analyzed
     * @param options - optional settings for the operation
     *
     * @returns an array of results corresponding to the input actions
     */
    beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents: TextDocumentInput[], options?: BeginAnalyzeBatchOptions): Promise<AnalyzeBatchPoller>;
    /**
     * Creates a poller from the serialized state of another poller. This can be
     * useful when you want to create pollers on a different host or a poller
     * needs to be constructed after the original one is not in scope.
     *
     * @param serializedState - the serialized state of another poller. It is the
     *                          result of `poller.toString()`
     * @param options - optional settings for the operation
     *
     * # Example
     *
     * `client.beginAnalyzeBatch` returns a promise that will resolve to a poller.
     * The state of the poller can be serialized and used to create another as follows:
     *
     * ```js
     * const serializedState = poller.toString();
     * const rehydratedPoller = await client.createAnalyzeBatchPoller(serializedState);
     * const actionResults = await rehydratedPoller.pollUntilDone();
     * ```
     */
    restoreAnalyzeBatchPoller(serializedState: string, options?: RestoreAnalyzeBatchPollerOptions): Promise<AnalyzeBatchPoller>;
}

/**
 * Configuration options for {@link TextAnalysisClient}.
 */
export declare interface TextAnalysisClientOptions extends CommonClientOptions {
    /**
     * The default country hint to use. Defaults to "us".
     */
    defaultCountryHint?: string;
    /**
     * The default language to use. Defaults to "en".
     */
    defaultLanguage?: string;
    /**
     * The version of the Cognitive Language Service API to use.
     */
    serviceVersion?: string;
}

/**
 * Type describing an API error.
 */
export declare interface TextAnalysisError {
    /**
     * A code describing the kind of error produced. See {@link KnownTextAnalysisErrorCode}.
     */
    readonly code: string;
    /**
     * A message from the service explaining the error
     */
    readonly message: string;
    /**
     * The target of the particular error (for example, the name of an invalid parameter)
     */
    readonly target?: string;
}

/**
 * Base type for error results of an action corresponding to a single document.
 */
export declare interface TextAnalysisErrorResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * The Error for this document result.
     */
    readonly error: TextAnalysisError;
}

/**
 * Options common to all operations.
 */
export declare interface TextAnalysisOperationOptions extends OperationOptions {
    /**
     * If set to true, response will contain input and document level statistics.
     */
    includeStatistics?: boolean;
}

/**
 * Base type for results of an action corresponding to a single input document.
 */
export declare interface TextAnalysisSuccessResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * Statistics about the input document and how it was processed by the service.
     * This property will have a value when includeStatistics is set to true in
     * the client call.
     */
    readonly statistics?: TextDocumentStatistics;
    /**
     * An array of warning data corresponding to this document.
     *
     * If no warnings were returned, this array will be empty.
     */
    readonly warnings: DocumentWarning[];
    /**
     * Discriminant to determine if this is an error result.
     */
    readonly error?: undefined;
}

/** if includeStatistics=true was specified in the request this field will contain information about the request payload. */
export declare interface TextDocumentBatchStatistics {
    /** Describes unknown properties. The value of an unknown property can be of "any" type. */
    [property: string]: any;
    /** Number of documents submitted in the request. */
    documentCount: number;
    /** Number of valid documents. This excludes empty, over-size limit or non-supported languages documents. */
    validDocumentCount: number;
    /** Number of invalid documents. This includes empty, over-size limit or non-supported languages documents. */
    erroneousDocumentCount: number;
    /** Number of transactions for the request. */
    transactionCount: number;
}

/** An object representing an individual text document to be analyzed by the Language service. The document contains a unique document ID, the full text of the document, and the language of the document's text. */
export declare interface TextDocumentInput {
    /** A unique, non-empty document identifier. */
    id: string;
    /** The input text to process. */
    text: string;
    /** (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en" for English; "es" for Spanish etc. For Auto Language Detection, use "auto". If not set, use "en" for English as default. */
    language?: string;
}

/** if includeStatistics=true was specified in the request this field will contain information about the document payload. */
export declare interface TextDocumentStatistics {
    /** Number of text elements recognized in the document. */
    characterCount: number;
    /** Number of transactions for the document. */
    transactionCount: number;
}

/** Defines values for TokenSentimentLabel. */
export declare type TokenSentimentLabel = "positive" | "mixed" | "negative";

/** Represents the volume entity resolution model. */
export declare interface VolumeResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "VolumeResolution";
    /** The Volume Unit of measurement */
    unit: VolumeUnit;
}

/**
 * Defines values for VolumeUnit. \
 * {@link KnownVolumeUnit} can be used interchangeably with VolumeUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **CubicMeter** \
 * **CubicCentimeter** \
 * **CubicMillimeter** \
 * **Hectoliter** \
 * **Decaliter** \
 * **Liter** \
 * **Centiliter** \
 * **Milliliter** \
 * **CubicYard** \
 * **CubicInch** \
 * **CubicFoot** \
 * **CubicMile** \
 * **FluidOunce** \
 * **Teaspoon** \
 * **Tablespoon** \
 * **Pint** \
 * **Quart** \
 * **Cup** \
 * **Gill** \
 * **Pinch** \
 * **FluidDram** \
 * **Barrel** \
 * **Minim** \
 * **Cord** \
 * **Peck** \
 * **Bushel** \
 * **Hogshead**
 */
export declare type VolumeUnit = string;

/**
 * Defines values for WarningCode. \
 * {@link KnownWarningCode} can be used interchangeably with WarningCode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **LongWordsInDocument** \
 * **DocumentTruncated**
 */
export declare type WarningCode = string;

/** Represents the weight entity resolution model. */
export declare interface WeightResolution extends BaseResolution, QuantityResolution {
    /** Polymorphic discriminator, which specifies the different types this object can be */
    resolutionKind: "WeightResolution";
    /** The weight Unit of measurement. */
    unit: WeightUnit;
}

/**
 * Defines values for WeightUnit. \
 * {@link KnownWeightUnit} can be used interchangeably with WeightUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unspecified** \
 * **Kilogram** \
 * **Gram** \
 * **Milligram** \
 * **Gallon** \
 * **MetricTon** \
 * **Ton** \
 * **Pound** \
 * **Ounce** \
 * **Grain** \
 * **PennyWeight** \
 * **LongTonBritish** \
 * **ShortTonUS** \
 * **ShortHundredWeightUS** \
 * **Stone** \
 * **Dram**
 */
export declare type WeightUnit = string;

/**
 * Document results with potentially automatically detected language.
 */
export declare type WithDetectedLanguage<T> = T & DocumentDetectedLanguage & {
    /** Indicates whether the default language hint was used */
    isLanguageDefaulted?: boolean;
};

export { }
